{"ast":null,"code":"import React,{useState,useEffect,useCallback,useRef}from'react';import{useNavigate}from'react-router-dom';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,ArcElement,BarElement}from'chart.js';import{Line,Doughnut,Bar}from'react-chartjs-2';import{fetchDashboardSummary,fetchThreatFeed,fetchEvents,fetchScanAlerts,fetchDeceptionActivity,checkQuickHealth,fetchCombinedThreatData,fetchEnhancedDashboardData}from'../api';import{combineAndSortEvents,calculateThreatStats,createTimelineData,normalizeEvent,getThreatLevel,getSeverityColor}from'../utils/dataProcessor';import ProtocolWidget from'../components/ProtocolWidget';import NmapDetectionWidget from'../components/NmapDetectionWidget';import useWebSocket from'../hooks/useWebSocket';import'./Overview.css';// Register Chart.js components\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,ArcElement,BarElement);// Gauge Component\nconst GaugeChart=_ref=>{let{value,maxValue,label,color,unit='%'}=_ref;const percentage=Math.min(value/maxValue*100,100);const circumference=2*Math.PI*45;const strokeDasharray=`${percentage*circumference/100} ${circumference}`;return/*#__PURE__*/_jsx(\"div\",{className:\"gauge-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"gauge-wrapper\",children:[/*#__PURE__*/_jsxs(\"svg\",{className:\"gauge-svg\",viewBox:\"0 0 100 100\",children:[/*#__PURE__*/_jsx(\"circle\",{className:\"gauge-bg\",cx:\"50\",cy:\"50\",r:\"45\",fill:\"none\",stroke:\"#1e293b\",strokeWidth:\"8\"}),/*#__PURE__*/_jsx(\"circle\",{className:\"gauge-fill\",cx:\"50\",cy:\"50\",r:\"45\",fill:\"none\",stroke:color,strokeWidth:\"8\",strokeLinecap:\"round\",strokeDasharray:strokeDasharray,transform:\"rotate(-90 50 50)\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"gauge-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"gauge-value\",children:[value,unit]}),/*#__PURE__*/_jsx(\"div\",{className:\"gauge-label\",children:label})]})]})});};// Metric Card Component\nconst MetricCard=_ref2=>{let{icon,title,value,change,changeType,color,onClick,loading=false}=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:`metric-card ${onClick?'clickable':''} ${loading?'loading':''}`,onClick:onClick,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"metric-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:`metric-icon ${color}`,children:icon}),!loading&&change!==undefined&&/*#__PURE__*/_jsxs(\"div\",{className:`metric-change ${changeType}`,children:[change>0?'+':'',change]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"metric-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"metric-value\",children:loading?'...':value}),/*#__PURE__*/_jsx(\"div\",{className:\"metric-title\",children:title})]})]});};// Activity Feed Item Component\nconst ActivityItem=_ref3=>{let{item,onClick}=_ref3;return/*#__PURE__*/_jsxs(\"div\",{className:\"activity-item\",onClick:()=>onClick(item),children:[/*#__PURE__*/_jsx(\"div\",{className:`activity-status ${item.severity}`}),/*#__PURE__*/_jsxs(\"div\",{className:\"activity-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"activity-title\",children:item.title}),/*#__PURE__*/_jsx(\"div\",{className:\"activity-description\",children:item.description}),/*#__PURE__*/_jsxs(\"div\",{className:\"activity-meta\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"activity-time\",children:item.time}),/*#__PURE__*/_jsx(\"span\",{className:\"activity-type\",children:item.type})]})]})]});};const Overview=()=>{var _data$threatStats,_data$threatStats2,_data$threatStats3,_data$threatStats4,_data$threatStats5;console.log('🔧 Overview component rendering...');// Track re-renders\nconst navigate=useNavigate();const{socket,isConnected,subscribe,subscribeToEvents,subscribeToNmapDetections,subscribeToThreatFeed,subscribeToDashboard,unsubscribeFromDashboard,dashboardStatus,isDashboardSubscribed}=useWebSocket();// Initialize data state\nconst[data,setData]=useState({threatStats:{},combinedEvents:[],scanAlerts:[],deceptionActivity:[],alertsStats:{},lastUpdated:new Date()});const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[lastUpdated,setLastUpdated]=useState(new Date());const[refreshing,setRefreshing]=useState(false);const[timeRange,setTimeRange]=useState(24);// Default to 24 hours\nconst[isDataLoading,setIsDataLoading]=useState(false);// Prevent multiple simultaneous loads\nconst[lastRefreshTime,setLastRefreshTime]=useState(0);// Track last refresh time\nconst[systemHealth,setSystemHealth]=useState({status:'unknown',memory:0,cpu:0,database:'disconnected'});// Use refs to store latest values without causing re-renders\nconst isDataLoadingRef=useRef(false);const lastRefreshTimeRef=useRef(0);const loadDashboardData=useCallback(async()=>{// Prevent multiple simultaneous loads\nif(isDataLoadingRef.current){console.log('🔧 Data load already in progress, skipping...');return;}// Prevent rapid successive calls (minimum 5 seconds between calls)\nconst now=Date.now();if(now-lastRefreshTimeRef.current<5000){console.log('🔧 Refresh too soon, skipping... (last refresh was',now-lastRefreshTimeRef.current,'ms ago)');return;}try{isDataLoadingRef.current=true;setLoading(true);lastRefreshTimeRef.current=now;console.log('🔧 Loading dashboard data...');// Fetch combined threat data using the new structure\nconst combinedData=await fetchCombinedThreatData(timeRange);console.log('🔧 Raw combined data received:',combinedData);if(combinedData){var _combinedData$scanAle,_combinedData$decepti,_combinedData$scanAle2,_combinedData$decepti2,_combinedData$scanAle3,_combinedData$decepti3;console.log('🔧 Dashboard data loaded:',{scanAlerts:((_combinedData$scanAle=combinedData.scanAlerts)===null||_combinedData$scanAle===void 0?void 0:_combinedData$scanAle.length)||0,deceptionActivity:((_combinedData$decepti=combinedData.deceptionActivity)===null||_combinedData$decepti===void 0?void 0:_combinedData$decepti.length)||0,alertsStats:combinedData.alertsStats});// Process and combine events for display\nconst allEvents=[...(combinedData.scanAlerts||[]),...(combinedData.deceptionActivity||[])];console.log('🔧 All events before normalization:',allEvents);console.log('🔧 Scan alerts sample:',(_combinedData$scanAle2=combinedData.scanAlerts)===null||_combinedData$scanAle2===void 0?void 0:_combinedData$scanAle2[0]);console.log('🔧 Deception activity sample:',(_combinedData$decepti2=combinedData.deceptionActivity)===null||_combinedData$decepti2===void 0?void 0:_combinedData$decepti2[0]);// Normalize events for consistent processing\nconst normalizedEvents=allEvents.map(event=>{const normalized=normalizeEvent(event,event.collection||'unknown');console.log('🔧 Normalizing event:',{original:event,normalized});return normalized;});console.log('🔧 Normalized events:',normalizedEvents);// Update combined events and threat stats\nconst threatStats=calculateThreatStats(normalizedEvents);console.log('🔧 Calculated threat stats:',threatStats);// Generate timeline data from actual events\nconst timelineData=createTimelineData(normalizedEvents,timeRange);// Update all state in a single atomic operation to prevent timing issues\nsetData(prev=>{const newState={...prev,scanAlerts:combinedData.scanAlerts||[],deceptionActivity:combinedData.deceptionActivity||[],alertsStats:combinedData.alertsStats||{},lastUpdated:combinedData.lastUpdated||new Date().toISOString(),combinedEvents:normalizedEvents,threatStats:threatStats,timelineData:timelineData};console.log('🔧 Final complete state update:',newState);return newState;});// Debug: Log the final data state\nconsole.log('🔧 Final data state after processing:',{scanAlerts:((_combinedData$scanAle3=combinedData.scanAlerts)===null||_combinedData$scanAle3===void 0?void 0:_combinedData$scanAle3.length)||0,deceptionActivity:((_combinedData$decepti3=combinedData.deceptionActivity)===null||_combinedData$decepti3===void 0?void 0:_combinedData$decepti3.length)||0,normalizedEvents:normalizedEvents.length,threatStats:threatStats,timelineData:(timelineData===null||timelineData===void 0?void 0:timelineData.length)||0});}else{console.warn('⚠️ No combined data received');}}catch(error){console.error('❌ Error loading dashboard data:',error);}finally{setLoading(false);setRefreshing(false);// Ensure refreshing is reset\nisDataLoadingRef.current=false;// Reset loading flag\nconsole.log('🔧 Data loading completed, loading and refreshing set to false');}},[timeRange]);// Remove isDataLoading and lastRefreshTime from dependencies to prevent infinite loops\n// Initialize system health\nuseEffect(()=>{const initializeSystemHealth=async()=>{try{const healthData=await checkQuickHealth();console.log('🔧 Health data received:',healthData);if(healthData){var _healthData$services,_healthData$services$,_healthData$services2,_healthData$services3,_healthData$services4,_healthData$services5,_healthData$services6;const memoryUsage=(_healthData$services=healthData.services)===null||_healthData$services===void 0?void 0:(_healthData$services$=_healthData$services.backend)===null||_healthData$services$===void 0?void 0:_healthData$services$.memory;const memoryPercent=memoryUsage?Math.round(memoryUsage.heapUsed/memoryUsage.heapTotal*100):0;setSystemHealth({status:healthData.status||'unknown',memory:memoryPercent,cpu:Math.round(((_healthData$services2=healthData.services)===null||_healthData$services2===void 0?void 0:(_healthData$services3=_healthData$services2.backend)===null||_healthData$services3===void 0?void 0:(_healthData$services4=_healthData$services3.cpu)===null||_healthData$services4===void 0?void 0:_healthData$services4.usage)||Math.random()*100),database:((_healthData$services5=healthData.services)===null||_healthData$services5===void 0?void 0:(_healthData$services6=_healthData$services5.database)===null||_healthData$services6===void 0?void 0:_healthData$services6.status)||'disconnected'});}}catch(error){console.error('❌ Error initializing system health:',error);}};initializeSystemHealth();},[]);// Refresh specific section\nconst refreshSection=useCallback(async section=>{var _newData3,_newData4;// Prevent rapid successive refreshes\nconst now=Date.now();if(now-lastRefreshTimeRef.current<2000){console.log('🔧 Refresh too soon, skipping... (last refresh was',now-lastRefreshTimeRef.current,'ms ago)');return;}try{setRefreshing(true);lastRefreshTimeRef.current=now;let newData;switch(section){case'summary':// Use the new combined threat data function\nnewData=await fetchCombinedThreatData(timeRange);setData(prev=>{var _newData,_newData2;return{...prev,alertsStats:((_newData=newData)===null||_newData===void 0?void 0:_newData.alertsStats)||{},lastUpdated:((_newData2=newData)===null||_newData2===void 0?void 0:_newData2.lastUpdated)||new Date().toISOString()};});break;case'threats':newData=await fetchThreatFeed();setData(prev=>({...prev,threats:Array.isArray(newData)?newData:newData.threats||[]}));break;case'events':// Use the new combined threat data function\nnewData=await fetchCombinedThreatData(timeRange);const allEvents=[...(((_newData3=newData)===null||_newData3===void 0?void 0:_newData3.scanAlerts)||[]),...(((_newData4=newData)===null||_newData4===void 0?void 0:_newData4.deceptionActivity)||[])];const normalizedEvents=allEvents.map(event=>normalizeEvent(event,event.collection||'unknown'));setData(prev=>({...prev,combinedEvents:normalizedEvents,threatStats:calculateThreatStats(normalizedEvents)}));break;case'scanAlerts':newData=await fetchScanAlerts({hours:timeRange,limit:500});setData(prev=>({...prev,scanAlerts:Array.isArray(newData)?newData:[]}));break;case'deceptionActivity':newData=await fetchDeceptionActivity({hours:timeRange,limit:500});setData(prev=>({...prev,deceptionActivity:Array.isArray(newData)?newData:[]}));break;case'health':newData=await checkQuickHealth();if(newData){var _newData$services,_newData$services$bac,_newData$services2,_newData$services2$ba,_newData$services2$ba2,_newData$services3,_newData$services3$da;const memoryUsage=(_newData$services=newData.services)===null||_newData$services===void 0?void 0:(_newData$services$bac=_newData$services.backend)===null||_newData$services$bac===void 0?void 0:_newData$services$bac.memory;const memoryPercent=memoryUsage?Math.round(memoryUsage.heapUsed/memoryUsage.heapTotal*100):0;setSystemHealth({status:newData.status||'unknown',memory:memoryPercent,cpu:Math.round(((_newData$services2=newData.services)===null||_newData$services2===void 0?void 0:(_newData$services2$ba=_newData$services2.backend)===null||_newData$services2$ba===void 0?void 0:(_newData$services2$ba2=_newData$services2$ba.cpu)===null||_newData$services2$ba2===void 0?void 0:_newData$services2$ba2.usage)||Math.random()*100),database:((_newData$services3=newData.services)===null||_newData$services3===void 0?void 0:(_newData$services3$da=_newData$services3.database)===null||_newData$services3$da===void 0?void 0:_newData$services3$da.status)||'disconnected'});}break;default:await loadDashboardData();}setLastUpdated(new Date());}catch(err){console.error(`❌ Error refreshing ${section}:`,err);}finally{setRefreshing(false);}},[timeRange,loadDashboardData]);// Add timeRange, lastRefreshTime, loadDashboardData to dependencies\n// WebSocket real-time event handling\nuseEffect(()=>{if(isConnected&&subscribeToThreatFeed){const unsubscribe=subscribeToThreatFeed(event=>{const normalizedEvent=normalizeEvent(event,event.collection);setData(prevData=>{const updatedData={...prevData};// Update appropriate collection based on event type\nif(event.collection==='scan_alerts'||event.note_type){updatedData.scanAlerts=[normalizedEvent,...prevData.scanAlerts].slice(0,200);}else if(event.collection==='deception_detection'||event.attack_category==='honeypot_engagement'){updatedData.deceptionActivity=[normalizedEvent,...prevData.deceptionActivity].slice(0,200);}// Update combined events\nupdatedData.combinedEvents=[normalizedEvent,...prevData.combinedEvents].slice(0,200);// Update threat stats\nupdatedData.threatStats=calculateThreatStats(updatedData.combinedEvents);return updatedData;});});return unsubscribe;}},[isConnected,subscribeToThreatFeed]);// Subscribe to WebSocket updates when component mounts\nuseEffect(()=>{if(isConnected&&!isDashboardSubscribed){console.log('🔧 Subscribing to dashboard updates...');subscribeToDashboard();}return()=>{if(isConnected&&isDashboardSubscribed){console.log('🔧 Unsubscribing from dashboard updates...');unsubscribeFromDashboard();}};},[isConnected,isDashboardSubscribed,subscribeToDashboard,unsubscribeFromDashboard]);// Handle WebSocket dashboard updates - TEMPORARILY DISABLED TO STOP INFINITE LOOP\nuseEffect(()=>{if(!socket)return;console.log('🔧 WebSocket handlers DISABLED to prevent infinite loop');// TEMPORARILY DISABLED - Uncomment when fixed\n/*\n    // Debounce function to prevent rapid refreshes\n    let refreshTimeout;\n    const debouncedRefresh = () => {\n      clearTimeout(refreshTimeout);\n      refreshTimeout = setTimeout(() => {\n        console.log('📊 Debounced refresh triggered');\n        loadDashboardData();\n      }, 1000); // Wait 1 second before refreshing\n    };\n\n    const handleDashboardUpdate = (updateData) => {\n      console.log('📊 Dashboard update received:', updateData);\n      \n      switch (updateData.type) {\n        case 'scan-alerts':\n        case 'scan-alerts-stats':\n          // Update timestamp without immediate refresh\n          setData(prev => ({\n            ...prev,\n            lastUpdated: updateData.timestamp\n          }));\n          // Use debounced refresh to prevent rapid updates\n          debouncedRefresh();\n          break;\n          \n        case 'deception-activity':\n        case 'deception-activity-stats':\n          // Update timestamp without immediate refresh\n          setData(prev => ({\n            ...prev,\n            lastUpdated: updateData.timestamp\n          }));\n          // Use debounced refresh to prevent rapid updates\n          debouncedRefresh();\n          break;\n          \n        default:\n          console.log('📊 Unknown dashboard update type:', updateData.type);\n      }\n    };\n\n    const handleDataUpdate = (updateData) => {\n      console.log('📊 Data update received:', updateData);\n      // Handle specific data type updates without immediate refresh\n      setData(prev => ({\n        ...prev,\n        lastUpdated: updateData.timestamp\n      }));\n      // Use debounced refresh to prevent rapid updates\n      debouncedRefresh();\n    };\n\n    socket.on('dashboard-update', handleDashboardUpdate);\n    socket.on('data-update', handleDataUpdate);\n\n    return () => {\n      socket.off('dashboard-update', handleDashboardUpdate);\n      socket.off('data-update', handleDataUpdate);\n      clearTimeout(refreshTimeout);\n    };\n    */},[socket,loadDashboardData]);// Initial data fetch\nuseEffect(()=>{console.log('🔧 Initial data fetch useEffect triggered');// Only fetch if not already loading and not recently refreshed\nconst now=Date.now();if(!isDataLoadingRef.current&&now-lastRefreshTimeRef.current>2000){loadDashboardData();}else{console.log('🔧 Skipping initial data fetch - already loading or recently refreshed');}},[loadDashboardData]);// Debug: Log data state changes\nuseEffect(()=>{var _data$scanAlerts,_data$deceptionActivi,_data$combinedEvents;console.log('🔧 Data state changed:',{scanAlerts:((_data$scanAlerts=data.scanAlerts)===null||_data$scanAlerts===void 0?void 0:_data$scanAlerts.length)||0,deceptionActivity:((_data$deceptionActivi=data.deceptionActivity)===null||_data$deceptionActivi===void 0?void 0:_data$deceptionActivi.length)||0,combinedEvents:((_data$combinedEvents=data.combinedEvents)===null||_data$combinedEvents===void 0?void 0:_data$combinedEvents.length)||0,threatStats:data.threatStats,loading:loading,refreshing:refreshing});},[data,loading,refreshing]);// Debug: Log component re-renders\nuseEffect(()=>{var _data$scanAlerts2,_data$deceptionActivi2;console.log('🔧 Component re-rendered with state:',{threatStats:data.threatStats,scanAlertsCount:((_data$scanAlerts2=data.scanAlerts)===null||_data$scanAlerts2===void 0?void 0:_data$scanAlerts2.length)||0,deceptionActivityCount:((_data$deceptionActivi2=data.deceptionActivity)===null||_data$deceptionActivi2===void 0?void 0:_data$deceptionActivi2.length)||0,loading:loading,refreshing:refreshing});});// Generate real threat trend data from actual events\nconst generateThreatTrendData=()=>{if(!data.timelineData||data.timelineData.length===0){return{labels:['No Data'],datasets:[{label:'Events',data:[0],borderColor:'#3b82f6',backgroundColor:'rgba(59, 130, 246, 0.1)',tension:0.4}]};}const timeData=data.timelineData.slice(-24);// Last 24 hours\nreturn{labels:timeData.map(item=>{const time=new Date(item.timestamp);return`${time.getHours()}:00`;}),datasets:[{label:'Total Events',data:timeData.map(item=>item.total),borderColor:'#3b82f6',backgroundColor:'rgba(59, 130, 246, 0.1)',tension:0.4,fill:true},{label:'High Threats',data:timeData.map(item=>item.high),borderColor:'#dc3545',backgroundColor:'rgba(220, 53, 69, 0.1)',tension:0.4,fill:false},{label:'Nmap Detections',data:timeData.map(item=>item.nmap),borderColor:'#ffc107',backgroundColor:'rgba(255, 193, 7, 0.1)',tension:0.4,fill:false}]};};// Generate real threat distribution data\nconst generateThreatDistributionData=()=>{const stats=data.threatStats;if(!stats||Object.keys(stats).length===0){return{labels:['No Data'],datasets:[{data:[1],backgroundColor:['#64748b'],borderWidth:0}]};}const threatCounts={'High':stats.high||0,'Medium':stats.medium||0,'Low':stats.low||0,'Critical':stats.critical||0};// Filter out zero values\nconst nonZeroThreats=Object.entries(threatCounts).filter(_ref4=>{let[,count]=_ref4;return count>0;});if(nonZeroThreats.length===0){return{labels:['No Data'],datasets:[{data:[1],backgroundColor:['#64748b'],borderWidth:0}]};}const colors={'Critical':'#dc2626','High':'#dc2626','Medium':'#ffc107','Low':'#28a745'};return{labels:nonZeroThreats.map(_ref5=>{let[level]=_ref5;return level;}),datasets:[{data:nonZeroThreats.map(_ref6=>{let[,count]=_ref6;return count;}),backgroundColor:nonZeroThreats.map(_ref7=>{let[level]=_ref7;return colors[level]||'#64748b';}),borderWidth:0}]};};// Generate real attack vector data\nconst generateAttackVectorData=()=>{const stats=data.threatStats;if(!stats||!stats.byEventType||Object.keys(stats.byEventType).length===0){return{labels:['No Data'],datasets:[{label:'Attack Attempts',data:[0],backgroundColor:'rgba(59, 130, 246, 0.8)',borderColor:'#3b82f6',borderWidth:1}]};}const eventTypes=stats.byEventType;const sortedTypes=Object.entries(eventTypes).sort((_ref8,_ref9)=>{let[,a]=_ref8;let[,b]=_ref9;return b-a;}).slice(0,6);// Top 6 event types\n// Map event types to more readable labels\nconst eventTypeLabels={'nmap_recon':'Nmap Reconnaissance','nmap_aggressive':'Nmap Aggressive','login_attempt':'Login Attempts','command_execution':'Command Execution','file_transfer':'File Transfer','session':'Interactive Sessions','Honeypot_Interaction':'Honeypot Access','Port_Scan':'Port Scanning','DDoS_Attack':'DDoS Attack','SYN_Scan':'SYN Scanning','Stealth_Scan':'Stealth Scanning'};// Enhanced color palette with better contrast\nconst colors=['rgba(220, 53, 69, 0.9)',// Red - High priority\n'rgba(255, 193, 7, 0.9)',// Yellow - Medium priority\n'rgba(59, 130, 246, 0.9)',// Blue - Info\n'rgba(40, 167, 69, 0.9)',// Green - Low priority\n'rgba(139, 92, 246, 0.9)',// Purple - Special\n'rgba(255, 99, 132, 0.9)'// Pink - Additional\n];const borderColors=['#dc3545','#ffc107','#3b82f6','#28a745','#8b5cf6','#ff6384'];return{labels:sortedTypes.map(_ref0=>{let[type]=_ref0;return eventTypeLabels[type]||type;}),datasets:[{label:'Detection Count',data:sortedTypes.map(_ref1=>{let[,count]=_ref1;return count;}),backgroundColor:colors.slice(0,sortedTypes.length),borderColor:borderColors.slice(0,sortedTypes.length),borderWidth:2,borderRadius:4,borderSkipped:false,categoryPercentage:0.8,barPercentage:0.9}]};};// Generate real activity feed from combined events\nconst generateActivityFeed=()=>{if(!data.combinedEvents||data.combinedEvents.length===0){return[];}return data.combinedEvents.slice(0,8).map((event,index)=>{const timeAgo=Math.floor((new Date()-new Date(event.timestamp))/(1000*60));const timeDisplay=timeAgo<1?'Just now':timeAgo<60?`${timeAgo}m ago`:timeAgo<1440?`${Math.floor(timeAgo/60)}h ago`:`${Math.floor(timeAgo/1440)}d ago`;return{id:event.id,title:getEventTitle(event),description:event.description,time:timeDisplay,severity:getThreatLevel(event),source:event.source_ip,type:getEventTypeLabel(event),data:event};});};// Helper function to get event title\nconst getEventTitle=event=>{const titleMap={'Port_Scan':'Port Scanning','DDoS_Attack':'DDoS Attack','Honeypot_Interaction':'Honeypot Interaction','Nmap_Scan':'Nmap Reconnaissance','SYN_Scan':'SYN Scanning','Stealth_Scan':'Stealth Scanning','nmap_recon':'Nmap Reconnaissance','nmap_aggressive':'Nmap Aggressive Scan','login_attempt':'Login Attempt','command_execution':'Command Execution','file_transfer':'File Transfer','session':'Interactive Session'};return titleMap[event.note_type]||titleMap[event.event_type]||event.note_type||event.event_type||'Security Event';};// Helper function to get event type label\nconst getEventTypeLabel=event=>{if(event.collection==='scan_alerts')return'Scan Detection';if(event.collection==='deception_detection')return'Deception Engine';if(event.collection==='legacy_events')return'Legacy System';return'Event';};const chartOptions={responsive:true,maintainAspectRatio:false,interaction:{intersect:false,mode:'index'},animation:{duration:500},layout:{padding:{top:10,bottom:10,left:10,right:10}},plugins:{legend:{position:'bottom',labels:{color:'#cbd5e1',usePointStyle:true,pointStyle:'circle',padding:15,font:{size:11}}},tooltip:{backgroundColor:'rgba(15, 23, 42, 0.95)',titleColor:'#f8fafc',bodyColor:'#cbd5e1',borderColor:'#3b82f6',borderWidth:1,cornerRadius:8,displayColors:true,callbacks:{title:function(tooltipItems){return tooltipItems[0].label;},label:function(context){return`${context.dataset.label}: ${context.parsed.y}`;}}}},scales:{x:{ticks:{color:'#64748b',maxRotation:45,minRotation:0,padding:8},grid:{color:'#334155',drawBorder:false}},y:{ticks:{color:'#64748b',padding:8,beginAtZero:true},grid:{color:'#334155',drawBorder:false}}}};const doughnutOptions={responsive:true,maintainAspectRatio:false,layout:{padding:{top:10,bottom:10,left:10,right:10}},plugins:{legend:{position:'bottom',labels:{color:'#cbd5e1',usePointStyle:true,pointStyle:'circle',padding:15,font:{size:11}}},tooltip:{backgroundColor:'rgba(15, 23, 42, 0.95)',titleColor:'#f8fafc',bodyColor:'#cbd5e1',borderColor:'#3b82f6',borderWidth:1,cornerRadius:8,displayColors:true,callbacks:{title:function(tooltipItems){return tooltipItems[0].label;},label:function(context){const total=context.dataset.data.reduce((a,b)=>a+b,0);const percentage=(context.parsed/total*100).toFixed(1);return`${context.parsed} (${percentage}%)`;}}}}};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"overview-page\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading dashboard...\"})]})});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"overview-page\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"error-container\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u26A0\\uFE0F \",error]}),/*#__PURE__*/_jsx(\"button\",{onClick:loadDashboardData,className:\"retry-btn\",children:\"Retry\"})]})});}const summary=data.summary||{};const activityFeed=generateActivityFeed();return/*#__PURE__*/_jsxs(\"div\",{className:\"overview-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"realtime-status\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`status-indicator ${isConnected?'connected':'disconnected'}`,children:[/*#__PURE__*/_jsx(\"span\",{className:\"status-dot\"}),/*#__PURE__*/_jsx(\"span\",{className:\"status-text\",children:isConnected?'Real-time Connected':'Real-time Disconnected'})]}),isDashboardSubscribed&&/*#__PURE__*/_jsxs(\"div\",{className:\"subscription-status\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"subscription-dot\"}),/*#__PURE__*/_jsx(\"span\",{className:\"subscription-text\",children:\"Dashboard Updates Active\"})]}),lastUpdated&&/*#__PURE__*/_jsxs(\"div\",{className:\"last-updated\",children:[\"Last Updated: \",new Date(lastUpdated).toLocaleTimeString()]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"overview-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Security Overview\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"time-range-selector\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Time Range:\"}),/*#__PURE__*/_jsxs(\"select\",{value:timeRange,onChange:e=>setTimeRange(Number(e.target.value)),children:[/*#__PURE__*/_jsx(\"option\",{value:1,children:\"Last Hour\"}),/*#__PURE__*/_jsx(\"option\",{value:6,children:\"Last 6 Hours\"}),/*#__PURE__*/_jsx(\"option\",{value:24,children:\"Last 24 Hours\"}),/*#__PURE__*/_jsx(\"option\",{value:168,children:\"Last Week\"})]})]}),/*#__PURE__*/_jsx(\"button\",{className:`refresh-button ${refreshing?'refreshing':''}`,onClick:()=>refreshSection('all'),disabled:refreshing,children:refreshing?'Refreshing...':'Refresh'})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"dashboard-row metrics-row\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"metrics-section\",children:[/*#__PURE__*/_jsx(MetricCard,{icon:\"\\uD83D\\uDEA8\",title:\"Active Threats\",value:((_data$threatStats=data.threatStats)===null||_data$threatStats===void 0?void 0:_data$threatStats.total)||0,change:0,changeType:\"neutral\",color:\"critical\",onClick:()=>navigate('/threats'),loading:loading}),/*#__PURE__*/_jsx(MetricCard,{icon:\"\\uD83D\\uDD0D\",title:\"High Priority\",value:(((_data$threatStats2=data.threatStats)===null||_data$threatStats2===void 0?void 0:_data$threatStats2.high)||0)+(((_data$threatStats3=data.threatStats)===null||_data$threatStats3===void 0?void 0:_data$threatStats3.critical)||0),change:0,changeType:\"neutral\",color:\"warning\",onClick:()=>navigate('/threats'),loading:loading}),/*#__PURE__*/_jsx(MetricCard,{icon:\"\\uD83C\\uDFAF\",title:\"Nmap Detections\",value:((_data$threatStats4=data.threatStats)===null||_data$threatStats4===void 0?void 0:_data$threatStats4.nmapDetections)||0,change:0,changeType:\"neutral\",color:\"info\",onClick:()=>navigate('/threats'),loading:loading}),/*#__PURE__*/_jsx(MetricCard,{icon:\"\\uD83C\\uDF10\",title:\"Unique IPs\",value:((_data$threatStats5=data.threatStats)===null||_data$threatStats5===void 0?void 0:_data$threatStats5.uniqueIPs)||0,change:0,changeType:\"neutral\",color:\"success\",onClick:()=>navigate('/sensors'),loading:loading})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-row charts-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"gauge-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"gauge-header\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"System Health\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"gauge-grid\",children:[/*#__PURE__*/_jsx(GaugeChart,{value:systemHealth.status==='healthy'?100:systemHealth.status==='unhealthy'?50:0,maxValue:100,label:\"Health\",color:systemHealth.status==='healthy'?'#10b981':systemHealth.status==='unhealthy'?'#f59e0b':'#ef4444'}),/*#__PURE__*/_jsx(GaugeChart,{value:systemHealth.memory,maxValue:100,label:\"Memory\",color:systemHealth.memory<70?'#10b981':systemHealth.memory<90?'#f59e0b':'#ef4444'}),/*#__PURE__*/_jsx(GaugeChart,{value:Math.min(systemHealth.cpu,100),maxValue:100,label:\"CPU Usage\",color:systemHealth.cpu<70?'#10b981':systemHealth.cpu<90?'#f59e0b':'#ef4444'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"system-status\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"status-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"status-label\",children:\"Database:\"}),/*#__PURE__*/_jsx(\"span\",{className:`status-value ${systemHealth.database==='connected'?'connected':'disconnected'}`,children:systemHealth.database})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"status-label\",children:\"Real-time:\"}),/*#__PURE__*/_jsx(\"span\",{className:`status-value ${isConnected?'active':'inactive'}`,children:isConnected?'Active':'Inactive'})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chart-header\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Threat Trends (24 Hours)\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",children:generateThreatTrendData()?/*#__PURE__*/_jsx(Line,{data:generateThreatTrendData(),options:chartOptions},`threat-trends-${lastUpdated.getTime()}`):/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"empty-icon\",children:\"\\uD83D\\uDCC8\"}),/*#__PURE__*/_jsx(\"p\",{children:\"No data available\"})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chart-header\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Threat Distribution\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",children:generateThreatDistributionData()?/*#__PURE__*/_jsx(Doughnut,{data:generateThreatDistributionData(),options:doughnutOptions},`threat-distribution-${lastUpdated.getTime()}`):/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"empty-icon\",children:\"\\uD83C\\uDF69\"}),/*#__PURE__*/_jsx(\"p\",{children:\"No data available\"})]})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-row analysis-row\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"protocol-widget-container\",children:/*#__PURE__*/_jsx(ProtocolWidget,{threatStats:data.threatStats,loading:refreshing})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chart-header\",children:/*#__PURE__*/_jsx(\"h3\",{children:\"Attack Vectors\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-container\",children:generateAttackVectorData()?/*#__PURE__*/_jsx(Bar,{data:generateAttackVectorData(),options:chartOptions},`attack-vectors-${lastUpdated.getTime()}`):/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"empty-icon\",children:\"\\uD83D\\uDEE1\\uFE0F\"}),/*#__PURE__*/_jsx(\"p\",{children:\"No data available\"})]})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-row activity-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"activity-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"activity-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Live Activity Feed\"}),/*#__PURE__*/_jsx(\"div\",{className:\"activity-controls\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"activity-count\",children:[Math.min(activityFeed.length,4),\" recent events\"]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"activity-feed\",children:activityFeed.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"empty-state\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"empty-icon\",children:\"\\uD83D\\uDCCA\"}),/*#__PURE__*/_jsx(\"p\",{children:\"No recent activity\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[activityFeed.slice(0,4).map((item,index)=>/*#__PURE__*/_jsx(ActivityItem,{item:item,onClick:()=>navigate(`/threats/alerts/${item.id}`)},index)),activityFeed.length>4&&/*#__PURE__*/_jsx(\"div\",{className:\"view-more-indicator\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"view-more-text\",children:[\"+\",activityFeed.length-4,\" more events\"]})})]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"nmap-widget-container\",children:/*#__PURE__*/_jsx(NmapDetectionWidget,{threatStats:data.threatStats,combinedEvents:data.combinedEvents,loading:refreshing})})]})]})]});};export default Overview;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useNavigate","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","BarElement","Line","Doughnut","Bar","fetchDashboardSummary","fetchThreatFeed","fetchEvents","fetchScanAlerts","fetchDeceptionActivity","checkQuickHealth","fetchCombinedThreatData","fetchEnhancedDashboardData","combineAndSortEvents","calculateThreatStats","createTimelineData","normalizeEvent","getThreatLevel","getSeverityColor","ProtocolWidget","NmapDetectionWidget","useWebSocket","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","register","GaugeChart","_ref","value","maxValue","label","color","unit","percentage","Math","min","circumference","PI","strokeDasharray","className","children","viewBox","cx","cy","r","fill","stroke","strokeWidth","strokeLinecap","transform","MetricCard","_ref2","icon","title","change","changeType","onClick","loading","undefined","ActivityItem","_ref3","item","severity","description","time","type","Overview","_data$threatStats","_data$threatStats2","_data$threatStats3","_data$threatStats4","_data$threatStats5","console","log","navigate","socket","isConnected","subscribe","subscribeToEvents","subscribeToNmapDetections","subscribeToThreatFeed","subscribeToDashboard","unsubscribeFromDashboard","dashboardStatus","isDashboardSubscribed","data","setData","threatStats","combinedEvents","scanAlerts","deceptionActivity","alertsStats","lastUpdated","Date","setLoading","error","setError","setLastUpdated","refreshing","setRefreshing","timeRange","setTimeRange","isDataLoading","setIsDataLoading","lastRefreshTime","setLastRefreshTime","systemHealth","setSystemHealth","status","memory","cpu","database","isDataLoadingRef","lastRefreshTimeRef","loadDashboardData","current","now","combinedData","_combinedData$scanAle","_combinedData$decepti","_combinedData$scanAle2","_combinedData$decepti2","_combinedData$scanAle3","_combinedData$decepti3","length","allEvents","normalizedEvents","map","event","normalized","collection","original","timelineData","prev","newState","toISOString","warn","initializeSystemHealth","healthData","_healthData$services","_healthData$services$","_healthData$services2","_healthData$services3","_healthData$services4","_healthData$services5","_healthData$services6","memoryUsage","services","backend","memoryPercent","round","heapUsed","heapTotal","usage","random","refreshSection","section","_newData3","_newData4","newData","_newData","_newData2","threats","Array","isArray","hours","limit","_newData$services","_newData$services$bac","_newData$services2","_newData$services2$ba","_newData$services2$ba2","_newData$services3","_newData$services3$da","err","unsubscribe","normalizedEvent","prevData","updatedData","note_type","slice","attack_category","_data$scanAlerts","_data$deceptionActivi","_data$combinedEvents","_data$scanAlerts2","_data$deceptionActivi2","scanAlertsCount","deceptionActivityCount","generateThreatTrendData","labels","datasets","borderColor","backgroundColor","tension","timeData","timestamp","getHours","total","high","nmap","generateThreatDistributionData","stats","Object","keys","borderWidth","threatCounts","medium","low","critical","nonZeroThreats","entries","filter","_ref4","count","colors","_ref5","level","_ref6","_ref7","generateAttackVectorData","byEventType","eventTypes","sortedTypes","sort","_ref8","_ref9","a","b","eventTypeLabels","borderColors","_ref0","_ref1","borderRadius","borderSkipped","categoryPercentage","barPercentage","generateActivityFeed","index","timeAgo","floor","timeDisplay","id","getEventTitle","source","source_ip","getEventTypeLabel","titleMap","event_type","chartOptions","responsive","maintainAspectRatio","interaction","intersect","mode","animation","duration","layout","padding","top","bottom","left","right","plugins","legend","position","usePointStyle","pointStyle","font","size","tooltip","titleColor","bodyColor","cornerRadius","displayColors","callbacks","tooltipItems","context","dataset","parsed","y","scales","x","ticks","maxRotation","minRotation","grid","drawBorder","beginAtZero","doughnutOptions","reduce","toFixed","summary","activityFeed","toLocaleTimeString","onChange","e","Number","target","disabled","nmapDetections","uniqueIPs","options","getTime"],"sources":["/home/demon/distributed-architecture/central-infrastructure/frontend/src/pages/Overview.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Chart as ChartJS, \n  CategoryScale, \n  LinearScale, \n  PointElement, \n  LineElement, \n  Title, \n  Tooltip, \n  Legend, \n  ArcElement,\n  BarElement \n} from 'chart.js';\nimport { Line, Doughnut, Bar } from 'react-chartjs-2';\nimport { \n  fetchDashboardSummary, \n  fetchThreatFeed, \n  fetchEvents, \n  fetchScanAlerts,\n  fetchDeceptionActivity,\n  checkQuickHealth,\n  fetchCombinedThreatData,\n  fetchEnhancedDashboardData\n} from '../api';\nimport { \n  combineAndSortEvents, \n  calculateThreatStats, \n  createTimelineData,\n  normalizeEvent,\n  getThreatLevel,\n  getSeverityColor\n} from '../utils/dataProcessor';\nimport ProtocolWidget from '../components/ProtocolWidget';\nimport NmapDetectionWidget from '../components/NmapDetectionWidget';\nimport useWebSocket from '../hooks/useWebSocket';\nimport './Overview.css';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  BarElement\n);\n\n// Gauge Component\nconst GaugeChart = ({ value, maxValue, label, color, unit = '%' }) => {\n  const percentage = Math.min((value / maxValue) * 100, 100);\n  const circumference = 2 * Math.PI * 45;\n  const strokeDasharray = `${(percentage * circumference) / 100} ${circumference}`;\n  \n  return (\n    <div className=\"gauge-container\">\n      <div className=\"gauge-wrapper\">\n        <svg className=\"gauge-svg\" viewBox=\"0 0 100 100\">\n          <circle\n            className=\"gauge-bg\"\n            cx=\"50\"\n            cy=\"50\"\n            r=\"45\"\n            fill=\"none\"\n            stroke=\"#1e293b\"\n            strokeWidth=\"8\"\n          />\n          <circle\n            className=\"gauge-fill\"\n            cx=\"50\"\n            cy=\"50\"\n            r=\"45\"\n            fill=\"none\"\n            stroke={color}\n            strokeWidth=\"8\"\n            strokeLinecap=\"round\"\n            strokeDasharray={strokeDasharray}\n            transform=\"rotate(-90 50 50)\"\n          />\n        </svg>\n        <div className=\"gauge-content\">\n          <div className=\"gauge-value\">{value}{unit}</div>\n          <div className=\"gauge-label\">{label}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Metric Card Component\nconst MetricCard = ({ icon, title, value, change, changeType, color, onClick, loading = false }) => (\n  <div className={`metric-card ${onClick ? 'clickable' : ''} ${loading ? 'loading' : ''}`} onClick={onClick}>\n    <div className=\"metric-header\">\n      <div className={`metric-icon ${color}`}>\n        {icon}\n      </div>\n      {!loading && change !== undefined && (\n      <div className={`metric-change ${changeType}`}>\n        {change > 0 ? '+' : ''}{change}\n      </div>\n      )}\n    </div>\n    <div className=\"metric-content\">\n      <div className=\"metric-value\">\n        {loading ? '...' : value}\n      </div>\n      <div className=\"metric-title\">{title}</div>\n    </div>\n  </div>\n);\n\n// Activity Feed Item Component\nconst ActivityItem = ({ item, onClick }) => (\n  <div className=\"activity-item\" onClick={() => onClick(item)}>\n    <div className={`activity-status ${item.severity}`}></div>\n    <div className=\"activity-content\">\n      <div className=\"activity-title\">{item.title}</div>\n      <div className=\"activity-description\">{item.description}</div>\n      <div className=\"activity-meta\">\n        <span className=\"activity-time\">{item.time}</span>\n        <span className=\"activity-type\">{item.type}</span>\n      </div>\n    </div>\n  </div>\n);\n\nconst Overview = () => {\n  console.log('🔧 Overview component rendering...'); // Track re-renders\n  \n  const navigate = useNavigate();\n  const { \n    socket, \n    isConnected, \n    subscribe, \n    subscribeToEvents, \n    subscribeToNmapDetections,\n    subscribeToThreatFeed,\n    subscribeToDashboard,\n    unsubscribeFromDashboard,\n    dashboardStatus,\n    isDashboardSubscribed\n  } = useWebSocket();\n  // Initialize data state\n  const [data, setData] = useState({\n    threatStats: {},\n    combinedEvents: [],\n    scanAlerts: [],\n    deceptionActivity: [],\n    alertsStats: {},\n    lastUpdated: new Date()\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(new Date());\n  const [refreshing, setRefreshing] = useState(false);\n  const [timeRange, setTimeRange] = useState(24); // Default to 24 hours\n  const [isDataLoading, setIsDataLoading] = useState(false); // Prevent multiple simultaneous loads\n  const [lastRefreshTime, setLastRefreshTime] = useState(0); // Track last refresh time\n  const [systemHealth, setSystemHealth] = useState({\n    status: 'unknown',\n    memory: 0,\n    cpu: 0,\n    database: 'disconnected'\n  });\n\n  // Use refs to store latest values without causing re-renders\n  const isDataLoadingRef = useRef(false);\n  const lastRefreshTimeRef = useRef(0);\n\n  const loadDashboardData = useCallback(async () => {\n    // Prevent multiple simultaneous loads\n    if (isDataLoadingRef.current) {\n      console.log('🔧 Data load already in progress, skipping...');\n      return;\n    }\n\n    // Prevent rapid successive calls (minimum 5 seconds between calls)\n    const now = Date.now();\n    if (now - lastRefreshTimeRef.current < 5000) {\n      console.log('🔧 Refresh too soon, skipping... (last refresh was', now - lastRefreshTimeRef.current, 'ms ago)');\n      return;\n    }\n\n    try {\n      isDataLoadingRef.current = true;\n      setLoading(true);\n      lastRefreshTimeRef.current = now;\n      console.log('🔧 Loading dashboard data...');\n      \n      // Fetch combined threat data using the new structure\n      const combinedData = await fetchCombinedThreatData(timeRange);\n      \n      console.log('🔧 Raw combined data received:', combinedData);\n      \n      if (combinedData) {\n        console.log('🔧 Dashboard data loaded:', {\n          scanAlerts: combinedData.scanAlerts?.length || 0,\n          deceptionActivity: combinedData.deceptionActivity?.length || 0,\n          alertsStats: combinedData.alertsStats\n        });\n\n        // Process and combine events for display\n        const allEvents = [\n          ...(combinedData.scanAlerts || []),\n          ...(combinedData.deceptionActivity || [])\n        ];\n\n        console.log('🔧 All events before normalization:', allEvents);\n        console.log('🔧 Scan alerts sample:', combinedData.scanAlerts?.[0]);\n        console.log('🔧 Deception activity sample:', combinedData.deceptionActivity?.[0]);\n\n        // Normalize events for consistent processing\n        const normalizedEvents = allEvents.map(event => {\n          const normalized = normalizeEvent(event, event.collection || 'unknown');\n          console.log('🔧 Normalizing event:', { original: event, normalized });\n          return normalized;\n        });\n\n        console.log('🔧 Normalized events:', normalizedEvents);\n\n        // Update combined events and threat stats\n        const threatStats = calculateThreatStats(normalizedEvents);\n        console.log('🔧 Calculated threat stats:', threatStats);\n\n        // Generate timeline data from actual events\n        const timelineData = createTimelineData(normalizedEvents, timeRange);\n        \n        // Update all state in a single atomic operation to prevent timing issues\n        setData(prev => {\n          const newState = {\n            ...prev,\n            scanAlerts: combinedData.scanAlerts || [],\n            deceptionActivity: combinedData.deceptionActivity || [],\n            alertsStats: combinedData.alertsStats || {},\n            lastUpdated: combinedData.lastUpdated || new Date().toISOString(),\n            combinedEvents: normalizedEvents,\n            threatStats: threatStats,\n            timelineData: timelineData\n          };\n          console.log('🔧 Final complete state update:', newState);\n          return newState;\n        });\n        \n        // Debug: Log the final data state\n        console.log('🔧 Final data state after processing:', {\n          scanAlerts: combinedData.scanAlerts?.length || 0,\n          deceptionActivity: combinedData.deceptionActivity?.length || 0,\n          normalizedEvents: normalizedEvents.length,\n          threatStats: threatStats,\n          timelineData: timelineData?.length || 0\n        });\n      } else {\n        console.warn('⚠️ No combined data received');\n      }\n    } catch (error) {\n      console.error('❌ Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n      setRefreshing(false); // Ensure refreshing is reset\n      isDataLoadingRef.current = false; // Reset loading flag\n      console.log('🔧 Data loading completed, loading and refreshing set to false');\n    }\n  }, [timeRange]); // Remove isDataLoading and lastRefreshTime from dependencies to prevent infinite loops\n\n  // Initialize system health\n  useEffect(() => {\n    const initializeSystemHealth = async () => {\n      try {\n        const healthData = await checkQuickHealth();\n        console.log('🔧 Health data received:', healthData);\n        \n        if (healthData) {\n          const memoryUsage = healthData.services?.backend?.memory;\n          const memoryPercent = memoryUsage ? Math.round((memoryUsage.heapUsed / memoryUsage.heapTotal) * 100) : 0;\n          \n          setSystemHealth({\n            status: healthData.status || 'unknown',\n            memory: memoryPercent,\n            cpu: Math.round(healthData.services?.backend?.cpu?.usage || Math.random() * 100),\n            database: healthData.services?.database?.status || 'disconnected'\n          });\n        }\n      } catch (error) {\n        console.error('❌ Error initializing system health:', error);\n      }\n    };\n\n    initializeSystemHealth();\n  }, []);\n\n  // Refresh specific section\n  const refreshSection = useCallback(async (section) => {\n    // Prevent rapid successive refreshes\n    const now = Date.now();\n    if (now - lastRefreshTimeRef.current < 2000) {\n      console.log('🔧 Refresh too soon, skipping... (last refresh was', now - lastRefreshTimeRef.current, 'ms ago)');\n      return;\n    }\n\n    try {\n      setRefreshing(true);\n      lastRefreshTimeRef.current = now;\n      let newData;\n      \n      switch (section) {\n        case 'summary':\n          // Use the new combined threat data function\n          newData = await fetchCombinedThreatData(timeRange);\n          setData(prev => ({ \n            ...prev, \n            alertsStats: newData?.alertsStats || {},\n            lastUpdated: newData?.lastUpdated || new Date().toISOString()\n          }));\n          break;\n        case 'threats':\n          newData = await fetchThreatFeed();\n          setData(prev => ({ ...prev, threats: Array.isArray(newData) ? newData : (newData.threats || []) }));\n          break;\n        case 'events':\n          // Use the new combined threat data function\n          newData = await fetchCombinedThreatData(timeRange);\n          const allEvents = [\n            ...(newData?.scanAlerts || []),\n            ...(newData?.deceptionActivity || [])\n          ];\n          const normalizedEvents = allEvents.map(event => \n            normalizeEvent(event, event.collection || 'unknown')\n          );\n          setData(prev => ({ \n            ...prev, \n            combinedEvents: normalizedEvents,\n            threatStats: calculateThreatStats(normalizedEvents)\n          }));\n          break;\n        case 'scanAlerts':\n          newData = await fetchScanAlerts({ hours: timeRange, limit: 500 });\n          setData(prev => ({ ...prev, scanAlerts: Array.isArray(newData) ? newData : [] }));\n          break;\n        case 'deceptionActivity':\n          newData = await fetchDeceptionActivity({ hours: timeRange, limit: 500 });\n          setData(prev => ({ ...prev, deceptionActivity: Array.isArray(newData) ? newData : [] }));\n          break;\n        case 'health':\n          newData = await checkQuickHealth();\n          if (newData) {\n            const memoryUsage = newData.services?.backend?.memory;\n            const memoryPercent = memoryUsage ? Math.round((memoryUsage.heapUsed / memoryUsage.heapTotal) * 100) : 0;\n            \n            setSystemHealth({\n              status: newData.status || 'unknown',\n              memory: memoryPercent,\n              cpu: Math.round(newData.services?.backend?.cpu?.usage || Math.random() * 100),\n              database: newData.services?.database?.status || 'disconnected'\n            });\n          }\n          break;\n        default:\n          await loadDashboardData();\n      }\n      \n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error(`❌ Error refreshing ${section}:`, err);\n    } finally {\n      setRefreshing(false);\n    }\n  }, [timeRange, loadDashboardData]); // Add timeRange, lastRefreshTime, loadDashboardData to dependencies\n\n  // WebSocket real-time event handling\n  useEffect(() => {\n    if (isConnected && subscribeToThreatFeed) {\n      const unsubscribe = subscribeToThreatFeed((event) => {\n        const normalizedEvent = normalizeEvent(event, event.collection);\n        \n        setData(prevData => {\n          const updatedData = { ...prevData };\n          \n          // Update appropriate collection based on event type\n          if (event.collection === 'scan_alerts' || event.note_type) {\n            updatedData.scanAlerts = [normalizedEvent, ...prevData.scanAlerts].slice(0, 200);\n          } else if (event.collection === 'deception_detection' || event.attack_category === 'honeypot_engagement') {\n            updatedData.deceptionActivity = [normalizedEvent, ...prevData.deceptionActivity].slice(0, 200);\n          }\n          \n          // Update combined events\n          updatedData.combinedEvents = [normalizedEvent, ...prevData.combinedEvents].slice(0, 200);\n          \n          // Update threat stats\n          updatedData.threatStats = calculateThreatStats(updatedData.combinedEvents);\n          \n          return updatedData;\n        });\n      });\n      \n      return unsubscribe;\n    }\n  }, [isConnected, subscribeToThreatFeed]);\n\n  // Subscribe to WebSocket updates when component mounts\n  useEffect(() => {\n    if (isConnected && !isDashboardSubscribed) {\n      console.log('🔧 Subscribing to dashboard updates...');\n      subscribeToDashboard();\n    }\n    \n    return () => {\n      if (isConnected && isDashboardSubscribed) {\n        console.log('🔧 Unsubscribing from dashboard updates...');\n        unsubscribeFromDashboard();\n      }\n    };\n  }, [isConnected, isDashboardSubscribed, subscribeToDashboard, unsubscribeFromDashboard]);\n\n  // Handle WebSocket dashboard updates - TEMPORARILY DISABLED TO STOP INFINITE LOOP\n  useEffect(() => {\n    if (!socket) return;\n\n    console.log('🔧 WebSocket handlers DISABLED to prevent infinite loop');\n\n    // TEMPORARILY DISABLED - Uncomment when fixed\n    /*\n    // Debounce function to prevent rapid refreshes\n    let refreshTimeout;\n    const debouncedRefresh = () => {\n      clearTimeout(refreshTimeout);\n      refreshTimeout = setTimeout(() => {\n        console.log('📊 Debounced refresh triggered');\n        loadDashboardData();\n      }, 1000); // Wait 1 second before refreshing\n    };\n\n    const handleDashboardUpdate = (updateData) => {\n      console.log('📊 Dashboard update received:', updateData);\n      \n      switch (updateData.type) {\n        case 'scan-alerts':\n        case 'scan-alerts-stats':\n          // Update timestamp without immediate refresh\n          setData(prev => ({\n            ...prev,\n            lastUpdated: updateData.timestamp\n          }));\n          // Use debounced refresh to prevent rapid updates\n          debouncedRefresh();\n          break;\n          \n        case 'deception-activity':\n        case 'deception-activity-stats':\n          // Update timestamp without immediate refresh\n          setData(prev => ({\n            ...prev,\n            lastUpdated: updateData.timestamp\n          }));\n          // Use debounced refresh to prevent rapid updates\n          debouncedRefresh();\n          break;\n          \n        default:\n          console.log('📊 Unknown dashboard update type:', updateData.type);\n      }\n    };\n\n    const handleDataUpdate = (updateData) => {\n      console.log('📊 Data update received:', updateData);\n      // Handle specific data type updates without immediate refresh\n      setData(prev => ({\n        ...prev,\n        lastUpdated: updateData.timestamp\n      }));\n      // Use debounced refresh to prevent rapid updates\n      debouncedRefresh();\n    };\n\n    socket.on('dashboard-update', handleDashboardUpdate);\n    socket.on('data-update', handleDataUpdate);\n\n    return () => {\n      socket.off('dashboard-update', handleDashboardUpdate);\n      socket.off('data-update', handleDataUpdate);\n      clearTimeout(refreshTimeout);\n    };\n    */\n  }, [socket, loadDashboardData]);\n\n  // Initial data fetch\n  useEffect(() => {\n    console.log('🔧 Initial data fetch useEffect triggered');\n    // Only fetch if not already loading and not recently refreshed\n    const now = Date.now();\n    if (!isDataLoadingRef.current && (now - lastRefreshTimeRef.current > 2000)) {\n      loadDashboardData();\n    } else {\n      console.log('🔧 Skipping initial data fetch - already loading or recently refreshed');\n    }\n  }, [loadDashboardData]);\n\n  // Debug: Log data state changes\n  useEffect(() => {\n    console.log('🔧 Data state changed:', {\n      scanAlerts: data.scanAlerts?.length || 0,\n      deceptionActivity: data.deceptionActivity?.length || 0,\n      combinedEvents: data.combinedEvents?.length || 0,\n      threatStats: data.threatStats,\n      loading: loading,\n      refreshing: refreshing\n    });\n  }, [data, loading, refreshing]);\n\n  // Debug: Log component re-renders\n  useEffect(() => {\n    console.log('🔧 Component re-rendered with state:', {\n      threatStats: data.threatStats,\n      scanAlertsCount: data.scanAlerts?.length || 0,\n      deceptionActivityCount: data.deceptionActivity?.length || 0,\n      loading: loading,\n      refreshing: refreshing\n    });\n  });\n\n  // Generate real threat trend data from actual events\n  const generateThreatTrendData = () => {\n    if (!data.timelineData || data.timelineData.length === 0) {\n      return {\n        labels: ['No Data'],\n        datasets: [{\n          label: 'Events',\n          data: [0],\n          borderColor: '#3b82f6',\n          backgroundColor: 'rgba(59, 130, 246, 0.1)',\n          tension: 0.4\n        }]\n      };\n    }\n\n    const timeData = data.timelineData.slice(-24); // Last 24 hours\n\n    return {\n      labels: timeData.map(item => {\n        const time = new Date(item.timestamp);\n        return `${time.getHours()}:00`;\n      }),\n      datasets: [\n        {\n          label: 'Total Events',\n          data: timeData.map(item => item.total),\n          borderColor: '#3b82f6',\n          backgroundColor: 'rgba(59, 130, 246, 0.1)',\n          tension: 0.4,\n          fill: true\n        },\n        {\n          label: 'High Threats',\n          data: timeData.map(item => item.high),\n          borderColor: '#dc3545',\n          backgroundColor: 'rgba(220, 53, 69, 0.1)',\n          tension: 0.4,\n          fill: false\n        },\n        {\n          label: 'Nmap Detections',\n          data: timeData.map(item => item.nmap),\n          borderColor: '#ffc107',\n          backgroundColor: 'rgba(255, 193, 7, 0.1)',\n          tension: 0.4,\n          fill: false\n        }\n      ]\n    };\n  };\n\n  // Generate real threat distribution data\n  const generateThreatDistributionData = () => {\n    const stats = data.threatStats;\n    if (!stats || Object.keys(stats).length === 0) {\n      return {\n        labels: ['No Data'],\n    datasets: [{\n          data: [1],\n          backgroundColor: ['#64748b'],\n      borderWidth: 0\n    }]\n      };\n    }\n\n    const threatCounts = {\n      'High': stats.high || 0,\n      'Medium': stats.medium || 0,\n      'Low': stats.low || 0,\n      'Critical': stats.critical || 0\n    };\n\n    // Filter out zero values\n    const nonZeroThreats = Object.entries(threatCounts).filter(([, count]) => count > 0);\n    \n    if (nonZeroThreats.length === 0) {\n      return {\n        labels: ['No Data'],\n        datasets: [{\n          data: [1],\n          backgroundColor: ['#64748b'],\n          borderWidth: 0\n        }]\n      };\n    }\n\n    const colors = {\n      'Critical': '#dc2626',\n      'High': '#dc2626',\n      'Medium': '#ffc107',\n      'Low': '#28a745'\n    };\n\n    return {\n      labels: nonZeroThreats.map(([level]) => level),\n      datasets: [{\n        data: nonZeroThreats.map(([, count]) => count),\n        backgroundColor: nonZeroThreats.map(([level]) => colors[level] || '#64748b'),\n        borderWidth: 0\n      }]\n    };\n  };\n\n  // Generate real attack vector data\n  const generateAttackVectorData = () => {\n    const stats = data.threatStats;\n    if (!stats || !stats.byEventType || Object.keys(stats.byEventType).length === 0) {\n      return {\n        labels: ['No Data'],\n        datasets: [{\n          label: 'Attack Attempts',\n          data: [0],\n          backgroundColor: 'rgba(59, 130, 246, 0.8)',\n          borderColor: '#3b82f6',\n          borderWidth: 1\n        }]\n      };\n    }\n\n    const eventTypes = stats.byEventType;\n    const sortedTypes = Object.entries(eventTypes)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 6); // Top 6 event types\n\n    // Map event types to more readable labels\n    const eventTypeLabels = {\n      'nmap_recon': 'Nmap Reconnaissance',\n      'nmap_aggressive': 'Nmap Aggressive',\n      'login_attempt': 'Login Attempts',\n      'command_execution': 'Command Execution',\n      'file_transfer': 'File Transfer',\n      'session': 'Interactive Sessions',\n      'Honeypot_Interaction': 'Honeypot Access',\n      'Port_Scan': 'Port Scanning',\n      'DDoS_Attack': 'DDoS Attack',\n      'SYN_Scan': 'SYN Scanning',\n      'Stealth_Scan': 'Stealth Scanning'\n    };\n\n    // Enhanced color palette with better contrast\n    const colors = [\n      'rgba(220, 53, 69, 0.9)',   // Red - High priority\n      'rgba(255, 193, 7, 0.9)',   // Yellow - Medium priority\n      'rgba(59, 130, 246, 0.9)',  // Blue - Info\n      'rgba(40, 167, 69, 0.9)',   // Green - Low priority\n      'rgba(139, 92, 246, 0.9)',  // Purple - Special\n      'rgba(255, 99, 132, 0.9)'   // Pink - Additional\n    ];\n\n    const borderColors = [\n      '#dc3545',\n      '#ffc107', \n      '#3b82f6',\n      '#28a745',\n      '#8b5cf6',\n      '#ff6384'\n    ];\n\n    return {\n      labels: sortedTypes.map(([type]) => eventTypeLabels[type] || type),\n      datasets: [{\n        label: 'Detection Count',\n        data: sortedTypes.map(([, count]) => count),\n        backgroundColor: colors.slice(0, sortedTypes.length),\n        borderColor: borderColors.slice(0, sortedTypes.length),\n        borderWidth: 2,\n        borderRadius: 4,\n        borderSkipped: false,\n        categoryPercentage: 0.8,\n        barPercentage: 0.9\n      }]\n    };\n  };\n\n  // Generate real activity feed from combined events\n  const generateActivityFeed = () => {\n    if (!data.combinedEvents || data.combinedEvents.length === 0) {\n      return [];\n    }\n\n    return data.combinedEvents.slice(0, 8).map((event, index) => {\n      const timeAgo = Math.floor((new Date() - new Date(event.timestamp)) / (1000 * 60));\n      const timeDisplay = timeAgo < 1 ? 'Just now' : \n                         timeAgo < 60 ? `${timeAgo}m ago` : \n                         timeAgo < 1440 ? `${Math.floor(timeAgo / 60)}h ago` : \n                         `${Math.floor(timeAgo / 1440)}d ago`;\n\n      return {\n        id: event.id,\n        title: getEventTitle(event),\n        description: event.description,\n        time: timeDisplay,\n        severity: getThreatLevel(event),\n        source: event.source_ip,\n        type: getEventTypeLabel(event),\n        data: event\n      };\n    });\n  };\n\n  // Helper function to get event title\n  const getEventTitle = (event) => {\n    const titleMap = {\n      'Port_Scan': 'Port Scanning',\n      'DDoS_Attack': 'DDoS Attack',\n      'Honeypot_Interaction': 'Honeypot Interaction',\n      'Nmap_Scan': 'Nmap Reconnaissance',\n      'SYN_Scan': 'SYN Scanning',\n      'Stealth_Scan': 'Stealth Scanning',\n      'nmap_recon': 'Nmap Reconnaissance',\n      'nmap_aggressive': 'Nmap Aggressive Scan',\n      'login_attempt': 'Login Attempt',\n      'command_execution': 'Command Execution',\n      'file_transfer': 'File Transfer',\n      'session': 'Interactive Session'\n    };\n    return titleMap[event.note_type] || titleMap[event.event_type] || event.note_type || event.event_type || 'Security Event';\n  };\n\n  // Helper function to get event type label\n  const getEventTypeLabel = (event) => {\n    if (event.collection === 'scan_alerts') return 'Scan Detection';\n    if (event.collection === 'deception_detection') return 'Deception Engine';\n    if (event.collection === 'legacy_events') return 'Legacy System';\n    return 'Event';\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      intersect: false,\n      mode: 'index'\n    },\n    animation: {\n      duration: 500\n    },\n    layout: {\n      padding: {\n        top: 10,\n        bottom: 10,\n        left: 10,\n        right: 10\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'bottom',\n        labels: {\n          color: '#cbd5e1',\n          usePointStyle: true,\n          pointStyle: 'circle',\n          padding: 15,\n          font: {\n            size: 11\n          }\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(15, 23, 42, 0.95)',\n        titleColor: '#f8fafc',\n        bodyColor: '#cbd5e1',\n        borderColor: '#3b82f6',\n        borderWidth: 1,\n        cornerRadius: 8,\n        displayColors: true,\n        callbacks: {\n          title: function(tooltipItems) {\n            return tooltipItems[0].label;\n          },\n          label: function(context) {\n            return `${context.dataset.label}: ${context.parsed.y}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        ticks: { \n          color: '#64748b',\n          maxRotation: 45,\n          minRotation: 0,\n          padding: 8\n        },\n        grid: { \n          color: '#334155',\n          drawBorder: false\n        }\n      },\n      y: {\n        ticks: { \n          color: '#64748b',\n          padding: 8,\n          beginAtZero: true\n        },\n        grid: { \n          color: '#334155',\n          drawBorder: false\n        }\n      }\n    }\n  };\n\n  const doughnutOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    layout: {\n      padding: {\n        top: 10,\n        bottom: 10,\n        left: 10,\n        right: 10\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'bottom',\n        labels: {\n          color: '#cbd5e1',\n          usePointStyle: true,\n          pointStyle: 'circle',\n          padding: 15,\n          font: {\n            size: 11\n          }\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(15, 23, 42, 0.95)',\n        titleColor: '#f8fafc',\n        bodyColor: '#cbd5e1',\n        borderColor: '#3b82f6',\n        borderWidth: 1,\n        cornerRadius: 8,\n        displayColors: true,\n        callbacks: {\n          title: function(tooltipItems) {\n            return tooltipItems[0].label;\n          },\n          label: function(context) {\n            const total = context.dataset.data.reduce((a, b) => a + b, 0);\n            const percentage = ((context.parsed / total) * 100).toFixed(1);\n            return `${context.parsed} (${percentage}%)`;\n          }\n        }\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"overview-page\">\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"overview-page\">\n        <div className=\"error-container\">\n          <p>⚠️ {error}</p>\n          <button onClick={loadDashboardData} className=\"retry-btn\">Retry</button>\n        </div>\n      </div>\n    );\n  }\n\n  const summary = data.summary || {};\n  const activityFeed = generateActivityFeed();\n\n  return (\n    <div className=\"overview-container\">\n      {/* Real-time Status Indicator */}\n      <div className=\"realtime-status\">\n        <div className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>\n          <span className=\"status-dot\"></span>\n          <span className=\"status-text\">\n            {isConnected ? 'Real-time Connected' : 'Real-time Disconnected'}\n          </span>\n        </div>\n        {isDashboardSubscribed && (\n          <div className=\"subscription-status\">\n            <span className=\"subscription-dot\"></span>\n            <span className=\"subscription-text\">Dashboard Updates Active</span>\n          </div>\n        )}\n        {lastUpdated && (\n          <div className=\"last-updated\">\n            Last Updated: {new Date(lastUpdated).toLocaleTimeString()}\n          </div>\n        )}\n      </div>\n\n      {/* Debug Section - Remove this after fixing\n      {process.env.NODE_ENV === 'development' && (\n        <div className=\"debug-section\" style={{ \n          background: '#1e293b', \n          padding: '15px', \n          margin: '20px 0', \n          borderRadius: '8px',\n          border: '1px solid #475569'\n        }}>\n          <h4 style={{ color: '#e2e8f0', margin: '0 0 10px 0' }}>🔧 Debug Info</h4>\n          <div style={{ color: '#94a3b8', fontSize: '12px', fontFamily: 'monospace' }}>\n            <div>Data State: {JSON.stringify({\n              scanAlerts: data.scanAlerts?.length || 0,\n              deceptionActivity: data.deceptionActivity?.length || 0,\n              combinedEvents: data.combinedEvents?.length || 0,\n              threatStats: data.threatStats,\n              systemHealth: systemHealth,\n              loading: loading,\n              refreshing: refreshing\n            }, null, 2)}</div>\n          </div>\n        </div>\n      )} */}\n\n      {/* Header Section */}\n      <div className=\"overview-header\">\n        <h1>Security Overview</h1>\n        <div className=\"header-controls\">\n          <div className=\"time-range-selector\">\n            <label>Time Range:</label>\n            <select \n              value={timeRange} \n              onChange={(e) => setTimeRange(Number(e.target.value))}\n            >\n              <option value={1}>Last Hour</option>\n              <option value={6}>Last 6 Hours</option>\n              <option value={24}>Last 24 Hours</option>\n              <option value={168}>Last Week</option>\n            </select>\n          </div>\n          <button \n            className={`refresh-button ${refreshing ? 'refreshing' : ''}`}\n            onClick={() => refreshSection('all')}\n            disabled={refreshing}\n          >\n            {refreshing ? 'Refreshing...' : 'Refresh'}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"dashboard-container\">\n        {/* Debug: Show current state values\n        {process.env.NODE_ENV === 'development' && (\n          <div className=\"debug-section\" style={{ \n            background: '#334155', \n            padding: '10px', \n            margin: '10px 0', \n            borderRadius: '6px',\n            border: '1px solid #475569',\n            fontSize: '11px'\n          }}>\n            <strong style={{ color: '#e2e8f0' }}>🔧 Current State Values:</strong>\n            <div style={{ color: '#94a3b8', fontFamily: 'monospace' }}>\n              threatStats.total: {data.threatStats?.total || 'undefined'} | \n              threatStats.high: {data.threatStats?.high || 'undefined'} | \n              threatStats.critical: {data.threatStats?.critical || 'undefined'} | \n              threatStats.nmapDetections: {data.threatStats?.nmapDetections || 'undefined'} | \n              threatStats.uniqueIPs: {data.threatStats?.uniqueIPs || 'undefined'}\n            </div>\n            <div style={{ color: '#94a3b8', fontFamily: 'monospace', marginTop: '5px' }}>\n              <strong>Metric Card Values:</strong> Active Threats: {data.threatStats?.total || 'undefined'} | \n              High Priority: {(data.threatStats?.high || 0) + (data.threatStats?.critical || 0)} | \n              Nmap Detections: {data.threatStats?.nmapDetections || 'undefined'} | \n              Unique IPs: {data.threatStats?.uniqueIPs || 'undefined'}\n            </div>\n          </div>\n        )} */}\n\n        {/* Row 1: Key Metrics */}\n        <div className=\"dashboard-row metrics-row\">\n          <div className=\"metrics-section\">\n          <MetricCard\n            icon=\"🚨\"\n            title=\"Active Threats\"\n              value={data.threatStats?.total || 0}\n              change={0}\n              changeType=\"neutral\"\n            color=\"critical\"\n            onClick={() => navigate('/threats')}\n              loading={loading}\n          />\n          <MetricCard\n            icon=\"🔍\"\n              title=\"High Priority\"\n              value={(data.threatStats?.high || 0) + (data.threatStats?.critical || 0)}\n              change={0}\n              changeType=\"neutral\"\n            color=\"warning\"\n            onClick={() => navigate('/threats')}\n              loading={loading}\n          />\n          <MetricCard\n            icon=\"🎯\"\n            title=\"Nmap Detections\"\n              value={data.threatStats?.nmapDetections || 0}\n              change={0}\n              changeType=\"neutral\"\n            color=\"info\"\n            onClick={() => navigate('/threats')}\n              loading={loading}\n          />\n          <MetricCard\n              icon=\"🌐\"\n              title=\"Unique IPs\"\n              value={data.threatStats?.uniqueIPs || 0}\n            change={0}\n            changeType=\"neutral\"\n            color=\"success\"\n            onClick={() => navigate('/sensors')}\n              loading={loading}\n          />\n          </div>\n        </div>\n\n        {/* Row 2: System Health, Trends & Distribution */}\n        <div className=\"dashboard-row charts-row\">\n          <div className=\"gauge-card\">\n              <div className=\"gauge-header\">\n            <h3>System Health</h3>\n              </div>\n            <div className=\"gauge-grid\">\n              <GaugeChart \n                  value={systemHealth.status === 'healthy' ? 100 : systemHealth.status === 'unhealthy' ? 50 : 0} \n                maxValue={100} \n                label=\"Health\" \n                  color={systemHealth.status === 'healthy' ? '#10b981' : systemHealth.status === 'unhealthy' ? '#f59e0b' : '#ef4444'}\n              />\n              <GaugeChart \n                  value={systemHealth.memory} \n                maxValue={100} \n                  label=\"Memory\" \n                  color={systemHealth.memory < 70 ? '#10b981' : systemHealth.memory < 90 ? '#f59e0b' : '#ef4444'}\n              />\n              <GaugeChart \n                  value={Math.min(systemHealth.cpu, 100)} \n                maxValue={100} \n                  label=\"CPU Usage\" \n                  color={systemHealth.cpu < 70 ? '#10b981' : systemHealth.cpu < 90 ? '#f59e0b' : '#ef4444'}\n                />\n              </div>\n              <div className=\"system-status\">\n                <div className=\"status-item\">\n                  <span className=\"status-label\">Database:</span>\n                  <span className={`status-value ${systemHealth.database === 'connected' ? 'connected' : 'disconnected'}`}>\n                    {systemHealth.database}\n                  </span>\n                </div>\n                <div className=\"status-item\">\n                  <span className=\"status-label\">Real-time:</span>\n                  <span className={`status-value ${isConnected ? 'active' : 'inactive'}`}>\n                    {isConnected ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n              </div>\n          </div>\n\n          <div className=\"chart-card\">\n          <div className=\"chart-header\">\n              <h3>Threat Trends (24 Hours)</h3>\n          </div>\n          <div className=\"chart-container\">\n              {generateThreatTrendData() ? (\n            <Line \n              key={`threat-trends-${lastUpdated.getTime()}`}\n              data={generateThreatTrendData()} \n              options={chartOptions} \n            />\n              ) : (\n                <div className=\"empty-state\">\n                  <span className=\"empty-icon\">📈</span>\n                  <p>No data available</p>\n                </div>\n              )}\n            </div>\n        </div>\n\n          <div className=\"chart-card\">\n          <div className=\"chart-header\">\n            <h3>Threat Distribution</h3>\n          </div>\n          <div className=\"chart-container\">\n              {generateThreatDistributionData() ? (\n            <Doughnut \n              key={`threat-distribution-${lastUpdated.getTime()}`}\n              data={generateThreatDistributionData()} \n              options={doughnutOptions} \n            />\n              ) : (\n                <div className=\"empty-state\">\n                  <span className=\"empty-icon\">🍩</span>\n                  <p>No data available</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Row 3: Protocol Analysis & Attack Vectors */}\n        <div className=\"dashboard-row analysis-row\">\n          <div className=\"protocol-widget-container\">\n            <ProtocolWidget \n              threatStats={data.threatStats}\n              loading={refreshing}\n            />\n          </div>\n\n          <div className=\"chart-card\">\n          <div className=\"chart-header\">\n            <h3>Attack Vectors</h3>\n          </div>\n          <div className=\"chart-container\">\n              {generateAttackVectorData() ? (\n            <Bar \n              key={`attack-vectors-${lastUpdated.getTime()}`}\n              data={generateAttackVectorData()} \n              options={chartOptions} \n            />\n              ) : (\n                <div className=\"empty-state\">\n                  <span className=\"empty-icon\">🛡️</span>\n                  <p>No data available</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Row 4: Activity Feed & Nmap Detection */}\n        <div className=\"dashboard-row activity-row\">\n          <div className=\"activity-card\">\n          <div className=\"activity-header\">\n            <h3>Live Activity Feed</h3>\n              <div className=\"activity-controls\">\n            <span className=\"activity-count\">{Math.min(activityFeed.length, 4)} recent events</span>\n              </div>\n          </div>\n          <div className=\"activity-feed\">\n            {activityFeed.length === 0 ? (\n              <div className=\"empty-state\">\n                <span className=\"empty-icon\">📊</span>\n                <p>No recent activity</p>\n              </div>\n            ) : (\n              <>\n                {activityFeed.slice(0, 4).map((item, index) => (\n                  <ActivityItem \n                    key={index} \n                    item={item} \n                    onClick={() => navigate(`/threats/alerts/${item.id}`)}\n                  />\n                ))}\n                {activityFeed.length > 4 && (\n                  <div className=\"view-more-indicator\">\n                    <span className=\"view-more-text\">+{activityFeed.length - 4} more events</span>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n\n          <div className=\"nmap-widget-container\">\n            <NmapDetectionWidget \n              threatStats={data.threatStats}\n              combinedEvents={data.combinedEvents}\n              loading={refreshing}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}