{"ast":null,"code":"// Enhanced data processing utilities for streamlined database structure\n// Handles scan_alerts and deception_detection collections per Connection.md\n\n/**\n * Normalize event data from different collections into a unified format\n */\nexport const normalizeEvent = (event, collection = 'auto') => {\n  var _event$details, _event$details2, _event$details3, _event$details4;\n  console.log('ðŸ”§ normalizeEvent called with:', {\n    event,\n    collection\n  });\n\n  // Auto-detect collection type if not specified\n  if (collection === 'auto') {\n    if (event.note_type && event.source_ip && event.dest_port) {\n      collection = 'scan_alerts'; // Primary scan alerts collection\n      console.log('ðŸ”§ Auto-detected collection: scan_alerts');\n    } else if (event.note_type && event.source_ip && event.attack_category === 'honeypot_engagement') {\n      collection = 'deception_detection'; // Honeypot deception detection\n      console.log('ðŸ”§ Auto-detected collection: deception_detection');\n    } else if (event.event_type && event.protocol && event.source_ip) {\n      collection = 'legacy_events'; // Legacy events collection\n      console.log('ðŸ”§ Auto-detected collection: legacy_events');\n    } else {\n      console.log('ðŸ”§ Could not auto-detect collection, using unknown');\n      collection = 'unknown';\n    }\n  }\n  const baseEvent = {\n    id: event._id || event.id,\n    timestamp: event.timestamp,\n    collection: collection\n  };\n  console.log('ðŸ”§ Base event created:', baseEvent);\n  switch (collection) {\n    case 'scan_alerts':\n      const scanAlert = {\n        ...baseEvent,\n        source_ip: event.source_ip || event.attackerIP,\n        severity: event.severity || mapThreatLevelToSeverity(event.threatLevel || 'medium'),\n        event_type: event.note_type || event.alertType,\n        protocol: extractProtocolFromPort(event.dest_port),\n        dest_port: event.dest_port,\n        message: event.message,\n        uid: event.uid,\n        client_id: event.clientId,\n        threat_level: event.threatLevel || event.severity || 'medium',\n        source: event.source || 'enhanced_zeek',\n        description: event.message || 'Network security alert',\n        category: event.attack_category || 'network_scan',\n        scan_type: (_event$details = event.details) === null || _event$details === void 0 ? void 0 : _event$details.scan_type,\n        user_agent: (_event$details2 = event.details) === null || _event$details2 === void 0 ? void 0 : _event$details2.user_agent,\n        target_path: (_event$details3 = event.details) === null || _event$details3 === void 0 ? void 0 : _event$details3.path,\n        method: (_event$details4 = event.details) === null || _event$details4 === void 0 ? void 0 : _event$details4.method\n      };\n      console.log('ðŸ”§ Normalized scan alert:', scanAlert);\n      return scanAlert;\n    case 'deception_detection':\n      const deceptionEvent = {\n        ...baseEvent,\n        source_ip: event.source_ip || event.attackerIP,\n        severity: event.severity || mapThreatLevelToSeverity(event.threatLevel || 'medium'),\n        event_type: event.note_type || event.alertType,\n        protocol: extractProtocolFromPort(event.dest_port),\n        dest_port: event.dest_port,\n        message: event.message,\n        uid: event.uid,\n        client_id: event.clientId,\n        threat_level: event.threatLevel || event.severity || 'medium',\n        source: event.source || 'deception_engine',\n        description: event.message || 'Honeypot interaction detected',\n        category: event.attack_category || 'honeypot_engagement',\n        honeypot_id: event.dest_port,\n        session_id: event.uid\n      };\n      console.log('ðŸ”§ Normalized deception event:', deceptionEvent);\n      return deceptionEvent;\n    case 'legacy_events':\n      const legacyEvent = {\n        ...baseEvent,\n        source_ip: event.source_ip,\n        severity: event.severity || 'medium',\n        event_type: event.event_type || 'interaction',\n        protocol: event.protocol,\n        honeypot_id: event.honeypot_id,\n        session_id: event.session_id,\n        description: event.description || 'Legacy event',\n        category: 'legacy_event'\n      };\n      console.log('ðŸ”§ Normalized legacy event:', legacyEvent);\n      return legacyEvent;\n    default:\n      console.log('ðŸ”§ Using default event normalization');\n      return baseEvent;\n  }\n};\n\n/**\n * Generate human-readable description for events\n */\nexport const generateEventDescription = event => {\n  if (event.event_type === 'nmap_recon') {\n    var _event$data;\n    return `Nmap reconnaissance scan detected${(_event$data = event.data) !== null && _event$data !== void 0 && _event$data.scan_type ? ` (${event.data.scan_type})` : ''}`;\n  }\n  if (event.event_type === 'nmap_aggressive') {\n    var _event$data2;\n    return `Nmap aggressive scan detected${(_event$data2 = event.data) !== null && _event$data2 !== void 0 && _event$data2.scan_type ? ` (${event.data.scan_type})` : ''}`;\n  }\n  if (event.event_type === 'login_attempt') {\n    return `Login attempt on ${event.protocol || 'unknown'} service`;\n  }\n  if (event.event_type === 'command_execution') {\n    return `Command execution attempt detected`;\n  }\n  if (event.event_type === 'file_transfer') {\n    return `File transfer attempt on ${event.protocol || 'unknown'} service`;\n  }\n  if (event.event_type === 'session') {\n    return `Interactive session on ${event.protocol || 'unknown'} service`;\n  }\n  return event.description || `${event.event_type || 'Unknown'} event detected`;\n};\n\n/**\n * Map threat levels to severity for consistency\n */\nexport const mapThreatLevelToSeverity = threatLevel => {\n  const mapping = {\n    'critical': 'high',\n    'high': 'high',\n    'medium': 'medium',\n    'low': 'low',\n    'info': 'low'\n  };\n  return mapping[threatLevel === null || threatLevel === void 0 ? void 0 : threatLevel.toLowerCase()] || 'medium';\n};\n\n/**\n * Extract protocol from port string (e.g., \"22/tcp\" -> \"ssh\")\n */\nexport const extractProtocolFromPort = portString => {\n  if (!portString) return 'unknown';\n  const port = portString.split('/')[0];\n  const protocolMap = {\n    '22': 'ssh',\n    '21': 'ftp',\n    '23': 'telnet',\n    '80': 'http',\n    '443': 'https',\n    '25': 'smtp',\n    '53': 'dns',\n    '110': 'pop3',\n    '143': 'imap',\n    '993': 'imaps',\n    '995': 'pop3s'\n  };\n  return protocolMap[port] || portString;\n};\n\n/**\n * Get enhanced threat level based on event type and content\n */\nexport const getThreatLevel = event => {\n  if (event.collection === 'scan_alerts') {\n    return event.threat_level || event.severity || 'medium';\n  }\n  if (event.collection === 'deception_detection') {\n    return event.threat_level || event.severity || 'medium';\n  }\n  if (event.collection === 'legacy_events') {\n    switch (event.event_type) {\n      case 'nmap_aggressive':\n      case 'command_execution':\n        return 'high';\n      case 'nmap_recon':\n      case 'login_attempt':\n      case 'file_transfer':\n        return 'medium';\n      case 'session':\n        return 'low';\n      default:\n        return event.severity || 'low';\n    }\n  }\n  return event.severity || 'low';\n};\n\n/**\n * Get color for severity/threat level\n */\nexport const getSeverityColor = severity => {\n  const colors = {\n    'critical': '#dc3545',\n    'high': '#dc3545',\n    'medium': '#ffc107',\n    'low': '#28a745',\n    'info': '#17a2b8'\n  };\n  return colors[severity === null || severity === void 0 ? void 0 : severity.toLowerCase()] || colors.medium;\n};\n\n/**\n * Combine and sort events from multiple collections\n */\nexport const combineAndSortEvents = eventCollections => {\n  const allEvents = [];\n\n  // Process each collection\n  Object.entries(eventCollections).forEach(([collection, events]) => {\n    if (Array.isArray(events)) {\n      events.forEach(event => {\n        allEvents.push(normalizeEvent(event, collection));\n      });\n    }\n  });\n\n  // Sort by timestamp (newest first)\n  return allEvents.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n};\n\n/**\n * Calculate threat statistics for dashboard\n */\nexport const calculateThreatStats = events => {\n  console.log('ðŸ”§ calculateThreatStats called with events:', events);\n  const stats = {\n    total: events.length,\n    high: 0,\n    medium: 0,\n    low: 0,\n    critical: 0,\n    info: 0,\n    byProtocol: {},\n    byEventType: {},\n    byCollection: {},\n    nmapDetections: 0,\n    activeIPs: new Set(),\n    topAttackers: {}\n  };\n  console.log('ðŸ”§ Initial stats object:', stats);\n  events.forEach((event, index) => {\n    var _event$event_type;\n    console.log(`ðŸ”§ Processing event ${index}:`, event);\n    const severity = getThreatLevel(event);\n    console.log(`ðŸ”§ Event ${index} severity:`, severity);\n    stats[severity] = (stats[severity] || 0) + 1;\n\n    // Protocol distribution\n    if (event.protocol) {\n      stats.byProtocol[event.protocol] = (stats.byProtocol[event.protocol] || 0) + 1;\n    }\n\n    // Event type distribution\n    if (event.event_type) {\n      stats.byEventType[event.event_type] = (stats.byEventType[event.event_type] || 0) + 1;\n    }\n\n    // Collection distribution\n    stats.byCollection[event.collection] = (stats.byCollection[event.collection] || 0) + 1;\n\n    // Nmap detection count\n    if ((_event$event_type = event.event_type) !== null && _event$event_type !== void 0 && _event$event_type.includes('nmap') || event.scan_type) {\n      stats.nmapDetections++;\n    }\n\n    // Active IPs\n    if (event.source_ip) {\n      stats.activeIPs.add(event.source_ip);\n      stats.topAttackers[event.source_ip] = (stats.topAttackers[event.source_ip] || 0) + 1;\n    }\n  });\n\n  // Convert active IPs to count\n  stats.uniqueIPs = stats.activeIPs.size;\n  delete stats.activeIPs;\n\n  // Sort top attackers\n  stats.topAttackers = Object.entries(stats.topAttackers).sort(([, a], [, b]) => b - a).slice(0, 10).reduce((obj, [ip, count]) => {\n    obj[ip] = count;\n    return obj;\n  }, {});\n  console.log('ðŸ”§ Final calculated stats:', stats);\n  return stats;\n};\n\n/**\n * Create timeline data for charts\n */\nexport const createTimelineData = (events, hours = 24) => {\n  const now = new Date();\n  const timeSlots = {};\n\n  // Initialize time slots\n  for (let i = 0; i < hours; i++) {\n    const time = new Date(now.getTime() - i * 60 * 60 * 1000);\n    const hour = time.getHours();\n    const key = `${time.getFullYear()}-${String(time.getMonth() + 1).padStart(2, '0')}-${String(time.getDate()).padStart(2, '0')} ${String(hour).padStart(2, '0')}:00`;\n    timeSlots[key] = {\n      timestamp: key,\n      total: 0,\n      high: 0,\n      medium: 0,\n      low: 0,\n      nmap: 0\n    };\n  }\n\n  // Count events in each time slot\n  events.forEach(event => {\n    const eventTime = new Date(event.timestamp);\n    const hour = eventTime.getHours();\n    const key = `${eventTime.getFullYear()}-${String(eventTime.getMonth() + 1).padStart(2, '0')}-${String(eventTime.getDate()).padStart(2, '0')} ${String(hour).padStart(2, '0')}:00`;\n    if (timeSlots[key]) {\n      var _event$event_type2;\n      timeSlots[key].total++;\n      const severity = getThreatLevel(event);\n      timeSlots[key][severity] = (timeSlots[key][severity] || 0) + 1;\n      if ((_event$event_type2 = event.event_type) !== null && _event$event_type2 !== void 0 && _event$event_type2.includes('nmap') || event.scan_type) {\n        timeSlots[key].nmap++;\n      }\n    }\n  });\n  return Object.values(timeSlots).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n};\n\n/**\n * Filter events by various criteria\n */\nexport const filterEvents = (events, filters) => {\n  return events.filter(event => {\n    // Severity filter\n    if (filters.severity && filters.severity.length > 0) {\n      const eventSeverity = getThreatLevel(event);\n      if (!filters.severity.includes(eventSeverity)) return false;\n    }\n\n    // Protocol filter\n    if (filters.protocol && filters.protocol.length > 0) {\n      if (!filters.protocol.includes(event.protocol)) return false;\n    }\n\n    // Event type filter\n    if (filters.eventType && filters.eventType.length > 0) {\n      if (!filters.eventType.includes(event.event_type)) return false;\n    }\n\n    // Source IP filter\n    if (filters.sourceIP && filters.sourceIP.trim()) {\n      var _event$source_ip;\n      if (!((_event$source_ip = event.source_ip) !== null && _event$source_ip !== void 0 && _event$source_ip.includes(filters.sourceIP.trim()))) return false;\n    }\n\n    // Collection filter\n    if (filters.collection && filters.collection.length > 0) {\n      if (!filters.collection.includes(event.collection)) return false;\n    }\n\n    // Time range filter\n    if (filters.timeRange) {\n      const eventTime = new Date(event.timestamp);\n      const now = new Date();\n      const hoursAgo = now.getTime() - filters.timeRange * 60 * 60 * 1000;\n      if (eventTime.getTime() < hoursAgo) return false;\n    }\n\n    // Search query filter\n    if (filters.search && filters.search.trim()) {\n      const query = filters.search.trim().toLowerCase();\n      const searchableText = [event.source_ip, event.event_type, event.protocol, event.description, event.scan_type, event.user_agent, event.message].filter(Boolean).join(' ').toLowerCase();\n      if (!searchableText.includes(query)) return false;\n    }\n    return true;\n  });\n};\n\n/**\n * Export events to CSV format\n */\nexport const exportEventsToCSV = events => {\n  const headers = ['Timestamp', 'Source IP', 'Event Type', 'Severity', 'Protocol', 'Scan Type', 'Description', 'Collection', 'Honeypot ID', 'User Agent', 'Target Path'];\n  const csvData = events.map(event => [event.timestamp, event.source_ip || '', event.event_type || '', getThreatLevel(event), event.protocol || '', event.scan_type || '', event.description || '', event.collection || '', event.honeypot_id || '', event.user_agent || '', event.target_path || '']);\n  const csvContent = [headers, ...csvData].map(row => row.map(field => `\"${String(field).replace(/\"/g, '\"\"')}\"`).join(',')).join('\\n');\n  return csvContent;\n};","map":{"version":3,"names":["normalizeEvent","event","collection","_event$details","_event$details2","_event$details3","_event$details4","console","log","note_type","source_ip","dest_port","attack_category","event_type","protocol","baseEvent","id","_id","timestamp","scanAlert","attackerIP","severity","mapThreatLevelToSeverity","threatLevel","alertType","extractProtocolFromPort","message","uid","client_id","clientId","threat_level","source","description","category","scan_type","details","user_agent","target_path","path","method","deceptionEvent","honeypot_id","session_id","legacyEvent","generateEventDescription","_event$data","data","_event$data2","mapping","toLowerCase","portString","port","split","protocolMap","getThreatLevel","getSeverityColor","colors","medium","combineAndSortEvents","eventCollections","allEvents","Object","entries","forEach","events","Array","isArray","push","sort","a","b","Date","calculateThreatStats","stats","total","length","high","low","critical","info","byProtocol","byEventType","byCollection","nmapDetections","activeIPs","Set","topAttackers","index","_event$event_type","includes","add","uniqueIPs","size","slice","reduce","obj","ip","count","createTimelineData","hours","now","timeSlots","i","time","getTime","hour","getHours","key","getFullYear","String","getMonth","padStart","getDate","nmap","eventTime","_event$event_type2","values","filterEvents","filters","filter","eventSeverity","eventType","sourceIP","trim","_event$source_ip","timeRange","hoursAgo","search","query","searchableText","Boolean","join","exportEventsToCSV","headers","csvData","map","csvContent","row","field","replace"],"sources":["/home/demon/distributed-architecture/central-infrastructure/frontend/src/utils/dataProcessor.js"],"sourcesContent":["// Enhanced data processing utilities for streamlined database structure\n// Handles scan_alerts and deception_detection collections per Connection.md\n\n/**\n * Normalize event data from different collections into a unified format\n */\nexport const normalizeEvent = (event, collection = 'auto') => {\n  console.log('ðŸ”§ normalizeEvent called with:', { event, collection });\n  \n  // Auto-detect collection type if not specified\n  if (collection === 'auto') {\n    if (event.note_type && event.source_ip && event.dest_port) {\n      collection = 'scan_alerts'; // Primary scan alerts collection\n      console.log('ðŸ”§ Auto-detected collection: scan_alerts');\n    } else if (event.note_type && event.source_ip && event.attack_category === 'honeypot_engagement') {\n      collection = 'deception_detection'; // Honeypot deception detection\n      console.log('ðŸ”§ Auto-detected collection: deception_detection');\n    } else if (event.event_type && event.protocol && event.source_ip) {\n      collection = 'legacy_events'; // Legacy events collection\n      console.log('ðŸ”§ Auto-detected collection: legacy_events');\n    } else {\n      console.log('ðŸ”§ Could not auto-detect collection, using unknown');\n      collection = 'unknown';\n    }\n  }\n\n  const baseEvent = {\n    id: event._id || event.id,\n    timestamp: event.timestamp,\n    collection: collection\n  };\n\n  console.log('ðŸ”§ Base event created:', baseEvent);\n\n  switch (collection) {\n    case 'scan_alerts':\n      const scanAlert = {\n        ...baseEvent,\n        source_ip: event.source_ip || event.attackerIP,\n        severity: event.severity || mapThreatLevelToSeverity(event.threatLevel || 'medium'),\n        event_type: event.note_type || event.alertType,\n        protocol: extractProtocolFromPort(event.dest_port),\n        dest_port: event.dest_port,\n        message: event.message,\n        uid: event.uid,\n        client_id: event.clientId,\n        threat_level: event.threatLevel || event.severity || 'medium',\n        source: event.source || 'enhanced_zeek',\n        description: event.message || 'Network security alert',\n        category: event.attack_category || 'network_scan',\n        scan_type: event.details?.scan_type,\n        user_agent: event.details?.user_agent,\n        target_path: event.details?.path,\n        method: event.details?.method\n      };\n      console.log('ðŸ”§ Normalized scan alert:', scanAlert);\n      return scanAlert;\n\n    case 'deception_detection':\n      const deceptionEvent = {\n        ...baseEvent,\n        source_ip: event.source_ip || event.attackerIP,\n        severity: event.severity || mapThreatLevelToSeverity(event.threatLevel || 'medium'),\n        event_type: event.note_type || event.alertType,\n        protocol: extractProtocolFromPort(event.dest_port),\n        dest_port: event.dest_port,\n        message: event.message,\n        uid: event.uid,\n        client_id: event.clientId,\n        threat_level: event.threatLevel || event.severity || 'medium',\n        source: event.source || 'deception_engine',\n        description: event.message || 'Honeypot interaction detected',\n        category: event.attack_category || 'honeypot_engagement',\n        honeypot_id: event.dest_port,\n        session_id: event.uid\n      };\n      console.log('ðŸ”§ Normalized deception event:', deceptionEvent);\n      return deceptionEvent;\n\n    case 'legacy_events':\n      const legacyEvent = {\n        ...baseEvent,\n        source_ip: event.source_ip,\n        severity: event.severity || 'medium',\n        event_type: event.event_type || 'interaction',\n        protocol: event.protocol,\n        honeypot_id: event.honeypot_id,\n        session_id: event.session_id,\n        description: event.description || 'Legacy event',\n        category: 'legacy_event'\n      };\n      console.log('ðŸ”§ Normalized legacy event:', legacyEvent);\n      return legacyEvent;\n\n    default:\n      console.log('ðŸ”§ Using default event normalization');\n      return baseEvent;\n  }\n};\n\n/**\n * Generate human-readable description for events\n */\nexport const generateEventDescription = (event) => {\n  if (event.event_type === 'nmap_recon') {\n    return `Nmap reconnaissance scan detected${event.data?.scan_type ? ` (${event.data.scan_type})` : ''}`;\n  }\n  if (event.event_type === 'nmap_aggressive') {\n    return `Nmap aggressive scan detected${event.data?.scan_type ? ` (${event.data.scan_type})` : ''}`;\n  }\n  if (event.event_type === 'login_attempt') {\n    return `Login attempt on ${event.protocol || 'unknown'} service`;\n  }\n  if (event.event_type === 'command_execution') {\n    return `Command execution attempt detected`;\n  }\n  if (event.event_type === 'file_transfer') {\n    return `File transfer attempt on ${event.protocol || 'unknown'} service`;\n  }\n  if (event.event_type === 'session') {\n    return `Interactive session on ${event.protocol || 'unknown'} service`;\n  }\n  return event.description || `${event.event_type || 'Unknown'} event detected`;\n};\n\n/**\n * Map threat levels to severity for consistency\n */\nexport const mapThreatLevelToSeverity = (threatLevel) => {\n  const mapping = {\n    'critical': 'high',\n    'high': 'high',\n    'medium': 'medium',\n    'low': 'low',\n    'info': 'low'\n  };\n  return mapping[threatLevel?.toLowerCase()] || 'medium';\n};\n\n/**\n * Extract protocol from port string (e.g., \"22/tcp\" -> \"ssh\")\n */\nexport const extractProtocolFromPort = (portString) => {\n  if (!portString) return 'unknown';\n  \n  const port = portString.split('/')[0];\n  const protocolMap = {\n    '22': 'ssh',\n    '21': 'ftp',\n    '23': 'telnet',\n    '80': 'http',\n    '443': 'https',\n    '25': 'smtp',\n    '53': 'dns',\n    '110': 'pop3',\n    '143': 'imap',\n    '993': 'imaps',\n    '995': 'pop3s'\n  };\n  \n  return protocolMap[port] || portString;\n};\n\n/**\n * Get enhanced threat level based on event type and content\n */\nexport const getThreatLevel = (event) => {\n  if (event.collection === 'scan_alerts') {\n    return event.threat_level || event.severity || 'medium';\n  }\n  if (event.collection === 'deception_detection') {\n    return event.threat_level || event.severity || 'medium';\n  }\n  if (event.collection === 'legacy_events') {\n    switch (event.event_type) {\n      case 'nmap_aggressive':\n      case 'command_execution':\n        return 'high';\n      case 'nmap_recon':\n      case 'login_attempt':\n      case 'file_transfer':\n        return 'medium';\n      case 'session':\n        return 'low';\n      default:\n        return event.severity || 'low';\n    }\n  }\n  \n  return event.severity || 'low';\n};\n\n/**\n * Get color for severity/threat level\n */\nexport const getSeverityColor = (severity) => {\n  const colors = {\n    'critical': '#dc3545',\n    'high': '#dc3545',\n    'medium': '#ffc107',\n    'low': '#28a745',\n    'info': '#17a2b8'\n  };\n  return colors[severity?.toLowerCase()] || colors.medium;\n};\n\n/**\n * Combine and sort events from multiple collections\n */\nexport const combineAndSortEvents = (eventCollections) => {\n  const allEvents = [];\n  \n  // Process each collection\n  Object.entries(eventCollections).forEach(([collection, events]) => {\n    if (Array.isArray(events)) {\n      events.forEach(event => {\n        allEvents.push(normalizeEvent(event, collection));\n      });\n    }\n  });\n  \n  // Sort by timestamp (newest first)\n  return allEvents.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n};\n\n/**\n * Calculate threat statistics for dashboard\n */\nexport const calculateThreatStats = (events) => {\n  console.log('ðŸ”§ calculateThreatStats called with events:', events);\n  \n  const stats = {\n    total: events.length,\n    high: 0,\n    medium: 0,\n    low: 0,\n    critical: 0,\n    info: 0,\n    byProtocol: {},\n    byEventType: {},\n    byCollection: {},\n    nmapDetections: 0,\n    activeIPs: new Set(),\n    topAttackers: {}\n  };\n  \n  console.log('ðŸ”§ Initial stats object:', stats);\n  \n  events.forEach((event, index) => {\n    console.log(`ðŸ”§ Processing event ${index}:`, event);\n    \n    const severity = getThreatLevel(event);\n    console.log(`ðŸ”§ Event ${index} severity:`, severity);\n    \n    stats[severity] = (stats[severity] || 0) + 1;\n    \n    // Protocol distribution\n    if (event.protocol) {\n      stats.byProtocol[event.protocol] = (stats.byProtocol[event.protocol] || 0) + 1;\n    }\n    \n    // Event type distribution\n    if (event.event_type) {\n      stats.byEventType[event.event_type] = (stats.byEventType[event.event_type] || 0) + 1;\n    }\n    \n    // Collection distribution\n    stats.byCollection[event.collection] = (stats.byCollection[event.collection] || 0) + 1;\n    \n    // Nmap detection count\n    if (event.event_type?.includes('nmap') || event.scan_type) {\n      stats.nmapDetections++;\n    }\n    \n    // Active IPs\n    if (event.source_ip) {\n      stats.activeIPs.add(event.source_ip);\n      stats.topAttackers[event.source_ip] = (stats.topAttackers[event.source_ip] || 0) + 1;\n    }\n  });\n  \n  // Convert active IPs to count\n  stats.uniqueIPs = stats.activeIPs.size;\n  delete stats.activeIPs;\n  \n  // Sort top attackers\n  stats.topAttackers = Object.entries(stats.topAttackers)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 10)\n    .reduce((obj, [ip, count]) => {\n      obj[ip] = count;\n      return obj;\n    }, {});\n  \n  console.log('ðŸ”§ Final calculated stats:', stats);\n  return stats;\n};\n\n/**\n * Create timeline data for charts\n */\nexport const createTimelineData = (events, hours = 24) => {\n  const now = new Date();\n  const timeSlots = {};\n  \n  // Initialize time slots\n  for (let i = 0; i < hours; i++) {\n    const time = new Date(now.getTime() - i * 60 * 60 * 1000);\n    const hour = time.getHours();\n    const key = `${time.getFullYear()}-${String(time.getMonth() + 1).padStart(2, '0')}-${String(time.getDate()).padStart(2, '0')} ${String(hour).padStart(2, '0')}:00`;\n    timeSlots[key] = {\n      timestamp: key,\n      total: 0,\n      high: 0,\n      medium: 0,\n      low: 0,\n      nmap: 0\n    };\n  }\n  \n  // Count events in each time slot\n  events.forEach(event => {\n    const eventTime = new Date(event.timestamp);\n    const hour = eventTime.getHours();\n    const key = `${eventTime.getFullYear()}-${String(eventTime.getMonth() + 1).padStart(2, '0')}-${String(eventTime.getDate()).padStart(2, '0')} ${String(hour).padStart(2, '0')}:00`;\n    \n    if (timeSlots[key]) {\n      timeSlots[key].total++;\n      const severity = getThreatLevel(event);\n      timeSlots[key][severity] = (timeSlots[key][severity] || 0) + 1;\n      \n      if (event.event_type?.includes('nmap') || event.scan_type) {\n        timeSlots[key].nmap++;\n      }\n    }\n  });\n  \n  return Object.values(timeSlots).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n};\n\n/**\n * Filter events by various criteria\n */\nexport const filterEvents = (events, filters) => {\n  return events.filter(event => {\n    // Severity filter\n    if (filters.severity && filters.severity.length > 0) {\n      const eventSeverity = getThreatLevel(event);\n      if (!filters.severity.includes(eventSeverity)) return false;\n    }\n    \n    // Protocol filter\n    if (filters.protocol && filters.protocol.length > 0) {\n      if (!filters.protocol.includes(event.protocol)) return false;\n    }\n    \n    // Event type filter\n    if (filters.eventType && filters.eventType.length > 0) {\n      if (!filters.eventType.includes(event.event_type)) return false;\n    }\n    \n    // Source IP filter\n    if (filters.sourceIP && filters.sourceIP.trim()) {\n      if (!event.source_ip?.includes(filters.sourceIP.trim())) return false;\n    }\n    \n    // Collection filter\n    if (filters.collection && filters.collection.length > 0) {\n      if (!filters.collection.includes(event.collection)) return false;\n    }\n    \n    // Time range filter\n    if (filters.timeRange) {\n      const eventTime = new Date(event.timestamp);\n      const now = new Date();\n      const hoursAgo = now.getTime() - (filters.timeRange * 60 * 60 * 1000);\n      if (eventTime.getTime() < hoursAgo) return false;\n    }\n    \n    // Search query filter\n    if (filters.search && filters.search.trim()) {\n      const query = filters.search.trim().toLowerCase();\n      const searchableText = [\n        event.source_ip,\n        event.event_type,\n        event.protocol,\n        event.description,\n        event.scan_type,\n        event.user_agent,\n        event.message\n      ].filter(Boolean).join(' ').toLowerCase();\n      \n      if (!searchableText.includes(query)) return false;\n    }\n    \n    return true;\n  });\n};\n\n/**\n * Export events to CSV format\n */\nexport const exportEventsToCSV = (events) => {\n  const headers = [\n    'Timestamp',\n    'Source IP',\n    'Event Type',\n    'Severity',\n    'Protocol',\n    'Scan Type',\n    'Description',\n    'Collection',\n    'Honeypot ID',\n    'User Agent',\n    'Target Path'\n  ];\n  \n  const csvData = events.map(event => [\n    event.timestamp,\n    event.source_ip || '',\n    event.event_type || '',\n    getThreatLevel(event),\n    event.protocol || '',\n    event.scan_type || '',\n    event.description || '',\n    event.collection || '',\n    event.honeypot_id || '',\n    event.user_agent || '',\n    event.target_path || ''\n  ]);\n  \n  const csvContent = [headers, ...csvData]\n    .map(row => row.map(field => `\"${String(field).replace(/\"/g, '\"\"')}\"`).join(','))\n    .join('\\n');\n  \n  return csvContent;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}