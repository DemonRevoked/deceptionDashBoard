{"ast":null,"code":"import{useEffect,useState,useCallback,useRef}from'react';import io from'socket.io-client';const useWebSocket=()=>{const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[healthStatus,setHealthStatus]=useState(null);const[isHealthSubscribed,setIsHealthSubscribed]=useState(false);const[dashboardStatus,setDashboardStatus]=useState(null);const[isDashboardSubscribed,setIsDashboardSubscribed]=useState(false);// Use refs to avoid dependency issues\nconst reconnectTimeoutRef=useRef(null);const reconnectAttemptsRef=useRef(0);const socketRef=useRef(null);const isHealthSubscribedRef=useRef(false);const isDashboardSubscribedRef=useRef(false);const lastErrorTime=useRef(0);const maxReconnectAttempts=5;// Smart error logging - avoid console spam\nconst logError=useCallback((message,error)=>{const now=Date.now();const fiveMinutes=5*60*1000;// Only log errors every 5 minutes to avoid spam\nif(now-lastErrorTime.current>fiveMinutes){console.error(message,(error===null||error===void 0?void 0:error.message)||error);lastErrorTime.current=now;}},[]);// Initialize WebSocket connection - removed problematic dependencies\nuseEffect(()=>{// Smart WebSocket URL detection for distributed architecture\nconst getWsUrl=()=>{// If we're in a browser environment, dynamically determine from current page location\nif(typeof window!=='undefined'){// Use environment variable if set, otherwise dynamically determine from current location\nif(process.env.REACT_APP_WS_URL){return process.env.REACT_APP_WS_URL;}// Get current host and construct backend URL\nconst{protocol,hostname}=window.location;// Special handling for distributed architecture\n// If accessing from client VM (10.0.44.3), use central infrastructure IP (10.0.44.32)\nlet targetHost=hostname;if(hostname==='10.0.44.3'){targetHost='10.0.44.32';console.log('üîß WebSocket: Client VM detected, routing to central infrastructure:',targetHost);}return`${protocol}//${targetHost}:5000`;}// If we're in a Node.js environment (SSR), use the container URL\nreturn process.env.REACT_APP_WS_URL||'http://backend:5000';};const WS_URL=getWsUrl();// Clean up any existing connection\nif(socketRef.current){socketRef.current.disconnect();socketRef.current=null;}const newSocket=io(WS_URL,{transports:['websocket','polling'],timeout:10000,forceNew:true,autoConnect:true});socketRef.current=newSocket;newSocket.on('connect',()=>{// Removed console.log to reduce spam\nsetIsConnected(true);setSocket(newSocket);reconnectAttemptsRef.current=0;// Resubscribe to health updates if we were subscribed before\nif(isHealthSubscribedRef.current){newSocket.emit('subscribe-health');}// Resubscribe to dashboard updates if we were subscribed before\nif(isDashboardSubscribedRef.current){newSocket.emit('subscribe-dashboard');}});newSocket.on('disconnect',reason=>{// Only log disconnections, not normal operations\nif(reason!=='io client disconnect'){console.log('‚ùå WebSocket disconnected:',reason);}setIsConnected(false);setHealthStatus(null);// Auto-reconnect with exponential backoff (but limit attempts)\nif(reason!=='io client disconnect'&&reconnectAttemptsRef.current<maxReconnectAttempts){const delay=Math.min(1000*Math.pow(2,reconnectAttemptsRef.current),30000);if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}reconnectTimeoutRef.current=setTimeout(()=>{reconnectAttemptsRef.current++;// Only log actual reconnection attempts, not every disconnect\nif(reconnectAttemptsRef.current<=2){console.log(`üîÑ Reconnecting... (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`);}newSocket.connect();},delay);}else if(reconnectAttemptsRef.current>=maxReconnectAttempts){logError('üö® WebSocket max reconnection attempts reached. Please refresh the page.');}});newSocket.on('connect_error',error=>{logError('üîå WebSocket connection error:',error);setIsConnected(false);});// Handle health status updates\nnewSocket.on('health-status',data=>{setHealthStatus(data);});// Handle dashboard status updates\nnewSocket.on('dashboard-status',data=>{setDashboardStatus(data);});// Handle dashboard data updates\nnewSocket.on('dashboard-update',data=>{console.log('üìä Dashboard update received:',data);// This will be handled by the dashboard component\n});// Handle specific data type updates\nnewSocket.on('data-update',data=>{console.log('üìä Data update received:',data);// This will be handled by the dashboard component\n});// Multi-collection event handlers\nnewSocket.on('new-event',event=>{// Emit normalized event for components to handle\nnewSocket.emit('normalized-event',{...event,collection:'events',timestamp:event.timestamp||new Date().toISOString()});});// Handle new scan alerts\nnewSocket.on('new-scan-alert',alert=>{console.log('New scan alert received:',alert);const normalizedEvent={...alert,collection:'scan_alerts',timestamp:new Date().toISOString()};// Assuming onEvent is defined elsewhere or will be added\n// newSocket.emit('normalized-event', normalizedEvent); \n});// Handle new deception detection\nnewSocket.on('new-deception-activity',activity=>{console.log('New deception activity received:',activity);const normalizedEvent={...activity,collection:'deception_detection',timestamp:new Date().toISOString()};// Assuming onEvent is defined elsewhere or will be added\n// newSocket.emit('normalized-event', normalizedEvent); \n});// Legacy event handlers for backward compatibility\nnewSocket.on('new-zeek-alert',alert=>{console.log('Legacy Zeek alert received:',alert);const normalizedEvent={...alert,collection:'scan_alerts',timestamp:new Date().toISOString()};// Assuming onEvent is defined elsewhere or will be added\n// newSocket.emit('normalized-event', normalizedEvent); \n});newSocket.on('new-honeypot-event',event=>{// Emit normalized event for components to handle\nnewSocket.emit('normalized-event',{...event,collection:'honeypot_events',timestamp:event.timestamp||new Date().toISOString()});});newSocket.on('new-nmap-detection',event=>{// Special handling for Nmap detections\nnewSocket.emit('normalized-event',{...event,collection:'events',event_type:event.event_type||'nmap_detection',timestamp:event.timestamp||new Date().toISOString(),isNmapDetection:true});});// Generic error handler\nnewSocket.on('error',error=>{logError('üîå WebSocket error:',error);});setSocket(newSocket);return()=>{if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);reconnectTimeoutRef.current=null;}if(socketRef.current){socketRef.current.disconnect();socketRef.current=null;}};},[]);// Removed problematic dependencies\n// Subscribe to events\nconst subscribe=useCallback((eventName,handler)=>{if(!socket)return()=>{};socket.on(eventName,handler);// Return unsubscribe function\nreturn()=>{if(socket){socket.off(eventName,handler);}};},[socket]);// Unsubscribe from events\nconst unsubscribe=useCallback((eventName,handler)=>{if(!socket)return;socket.off(eventName,handler);},[socket]);// Subscribe to health updates\nconst subscribeToHealth=useCallback(()=>{if(socket&&isConnected){socket.emit('subscribe-health');setIsHealthSubscribed(true);isHealthSubscribedRef.current=true;}},[socket,isConnected]);// Unsubscribe from health updates\nconst unsubscribeFromHealth=useCallback(()=>{if(socket&&isConnected){socket.emit('unsubscribe-health');setIsHealthSubscribed(false);isHealthSubscribedRef.current=false;}},[socket,isConnected]);// Subscribe to dashboard updates\nconst subscribeToDashboard=useCallback(()=>{if(socket&&isConnected){socket.emit('subscribe-dashboard');setIsDashboardSubscribed(true);isDashboardSubscribedRef.current=true;}},[socket,isConnected]);// Unsubscribe from dashboard updates\nconst unsubscribeFromDashboard=useCallback(()=>{if(socket&&isConnected){socket.emit('unsubscribe-dashboard');setIsDashboardSubscribed(false);isDashboardSubscribedRef.current=false;}},[socket,isConnected]);// Subscribe to specific data type updates\nconst subscribeToDataType=useCallback(dataType=>{if(socket&&isConnected&&dataType){socket.emit('subscribe-data-type',dataType);}},[socket,isConnected]);// Unsubscribe from specific data type updates\nconst unsubscribeFromDataType=useCallback(dataType=>{if(socket&&isConnected&&dataType){socket.emit('unsubscribe-data-type',dataType);}},[socket,isConnected]);// Join honeypot room\nconst joinHoneypotRoom=useCallback(honeypotId=>{if(!socket||!honeypotId)return;socket.emit('join-honeypot',honeypotId);},[socket]);// Leave honeypot room\nconst leaveHoneypotRoom=useCallback(honeypotId=>{if(!socket||!honeypotId)return;socket.emit('leave-honeypot',honeypotId);},[socket]);// Subscribe to enhanced events (multi-collection)\nconst subscribeToEvents=useCallback(()=>{if(!socket)return;socket.emit('subscribe-events');},[socket]);// Unsubscribe from enhanced events\nconst unsubscribeFromEvents=useCallback(()=>{if(!socket)return;socket.emit('unsubscribe-events');},[socket]);// Subscribe to Nmap detections specifically\nconst subscribeToNmapDetections=useCallback(()=>{if(!socket)return;socket.emit('subscribe-nmap-detections');},[socket]);// Unsubscribe from Nmap detections\nconst unsubscribeFromNmapDetections=useCallback(()=>{if(!socket)return;socket.emit('unsubscribe-nmap-detections');},[socket]);// Subscribe to threat feed updates\nconst subscribeToThreatFeed=useCallback(()=>{if(!socket)return;socket.emit('subscribe-threat-feed');},[socket]);// Unsubscribe from threat feed updates\nconst unsubscribeFromThreatFeed=useCallback(()=>{if(!socket)return;socket.emit('unsubscribe-threat-feed');},[socket]);// Force reconnect function\nconst forceReconnect=useCallback(()=>{if(socketRef.current){reconnectAttemptsRef.current=0;socketRef.current.disconnect();socketRef.current.connect();}},[]);return{socket,isConnected,subscribe,unsubscribe,subscribeToHealth,unsubscribeFromHealth,healthStatus,isHealthSubscribed,subscribeToDashboard,unsubscribeFromDashboard,dashboardStatus,isDashboardSubscribed,joinHoneypotRoom,leaveHoneypotRoom,subscribeToEvents,unsubscribeFromEvents,subscribeToNmapDetections,unsubscribeFromNmapDetections,subscribeToThreatFeed,unsubscribeFromThreatFeed,forceReconnect};};export default useWebSocket;","map":{"version":3,"names":["useEffect","useState","useCallback","useRef","io","useWebSocket","socket","setSocket","isConnected","setIsConnected","healthStatus","setHealthStatus","isHealthSubscribed","setIsHealthSubscribed","dashboardStatus","setDashboardStatus","isDashboardSubscribed","setIsDashboardSubscribed","reconnectTimeoutRef","reconnectAttemptsRef","socketRef","isHealthSubscribedRef","isDashboardSubscribedRef","lastErrorTime","maxReconnectAttempts","logError","message","error","now","Date","fiveMinutes","current","console","getWsUrl","window","process","env","REACT_APP_WS_URL","protocol","hostname","location","targetHost","log","WS_URL","disconnect","newSocket","transports","timeout","forceNew","autoConnect","on","emit","reason","delay","Math","min","pow","clearTimeout","setTimeout","connect","data","event","collection","timestamp","toISOString","alert","normalizedEvent","activity","event_type","isNmapDetection","subscribe","eventName","handler","off","unsubscribe","subscribeToHealth","unsubscribeFromHealth","subscribeToDashboard","unsubscribeFromDashboard","subscribeToDataType","dataType","unsubscribeFromDataType","joinHoneypotRoom","honeypotId","leaveHoneypotRoom","subscribeToEvents","unsubscribeFromEvents","subscribeToNmapDetections","unsubscribeFromNmapDetections","subscribeToThreatFeed","unsubscribeFromThreatFeed","forceReconnect"],"sources":["/home/demon/distributed-architecture/central-infrastructure/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useState, useCallback, useRef } from 'react';\nimport io from 'socket.io-client';\n\nconst useWebSocket = () => {\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [healthStatus, setHealthStatus] = useState(null);\n  const [isHealthSubscribed, setIsHealthSubscribed] = useState(false);\n  const [dashboardStatus, setDashboardStatus] = useState(null);\n  const [isDashboardSubscribed, setIsDashboardSubscribed] = useState(false);\n  \n  // Use refs to avoid dependency issues\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttemptsRef = useRef(0);\n  const socketRef = useRef(null);\n  const isHealthSubscribedRef = useRef(false);\n  const isDashboardSubscribedRef = useRef(false);\n  const lastErrorTime = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // Smart error logging - avoid console spam\n  const logError = useCallback((message, error) => {\n    const now = Date.now();\n    const fiveMinutes = 5 * 60 * 1000;\n    \n    // Only log errors every 5 minutes to avoid spam\n    if (now - lastErrorTime.current > fiveMinutes) {\n      console.error(message, error?.message || error);\n      lastErrorTime.current = now;\n    }\n  }, []);\n\n  // Initialize WebSocket connection - removed problematic dependencies\n  useEffect(() => {\n    // Smart WebSocket URL detection for distributed architecture\n    const getWsUrl = () => {\n      // If we're in a browser environment, dynamically determine from current page location\n      if (typeof window !== 'undefined') {\n        // Use environment variable if set, otherwise dynamically determine from current location\n        if (process.env.REACT_APP_WS_URL) {\n          return process.env.REACT_APP_WS_URL;\n        }\n        \n        // Get current host and construct backend URL\n        const { protocol, hostname } = window.location;\n        \n        // Special handling for distributed architecture\n        // If accessing from client VM (10.0.44.3), use central infrastructure IP (10.0.44.32)\n        let targetHost = hostname;\n        if (hostname === '10.0.44.3') {\n          targetHost = '10.0.44.32';\n          console.log('üîß WebSocket: Client VM detected, routing to central infrastructure:', targetHost);\n        }\n        \n        return `${protocol}//${targetHost}:5000`;\n      }\n      // If we're in a Node.js environment (SSR), use the container URL\n      return process.env.REACT_APP_WS_URL || 'http://backend:5000';\n    };\n    \n    const WS_URL = getWsUrl();\n    \n    // Clean up any existing connection\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n\n    const newSocket = io(WS_URL, {\n      transports: ['websocket', 'polling'],\n      timeout: 10000,\n      forceNew: true,\n      autoConnect: true\n    });\n\n    socketRef.current = newSocket;\n\n    newSocket.on('connect', () => {\n      // Removed console.log to reduce spam\n      setIsConnected(true);\n      setSocket(newSocket);\n      reconnectAttemptsRef.current = 0;\n      \n      // Resubscribe to health updates if we were subscribed before\n      if (isHealthSubscribedRef.current) {\n        newSocket.emit('subscribe-health');\n      }\n      \n      // Resubscribe to dashboard updates if we were subscribed before\n      if (isDashboardSubscribedRef.current) {\n        newSocket.emit('subscribe-dashboard');\n      }\n    });\n\n    newSocket.on('disconnect', (reason) => {\n      // Only log disconnections, not normal operations\n      if (reason !== 'io client disconnect') {\n        console.log('‚ùå WebSocket disconnected:', reason);\n      }\n      setIsConnected(false);\n      setHealthStatus(null);\n      \n      // Auto-reconnect with exponential backoff (but limit attempts)\n      if (reason !== 'io client disconnect' && reconnectAttemptsRef.current < maxReconnectAttempts) {\n        const delay = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current), 30000);\n        \n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n        \n        reconnectTimeoutRef.current = setTimeout(() => {\n          reconnectAttemptsRef.current++;\n          // Only log actual reconnection attempts, not every disconnect\n          if (reconnectAttemptsRef.current <= 2) {\n            console.log(`üîÑ Reconnecting... (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`);\n          }\n          newSocket.connect();\n        }, delay);\n      } else if (reconnectAttemptsRef.current >= maxReconnectAttempts) {\n        logError('üö® WebSocket max reconnection attempts reached. Please refresh the page.');\n      }\n    });\n\n    newSocket.on('connect_error', (error) => {\n      logError('üîå WebSocket connection error:', error);\n      setIsConnected(false);\n    });\n\n    // Handle health status updates\n    newSocket.on('health-status', (data) => {\n      setHealthStatus(data);\n    });\n\n    // Handle dashboard status updates\n    newSocket.on('dashboard-status', (data) => {\n      setDashboardStatus(data);\n    });\n\n    // Handle dashboard data updates\n    newSocket.on('dashboard-update', (data) => {\n      console.log('üìä Dashboard update received:', data);\n      // This will be handled by the dashboard component\n    });\n\n    // Handle specific data type updates\n    newSocket.on('data-update', (data) => {\n      console.log('üìä Data update received:', data);\n      // This will be handled by the dashboard component\n    });\n\n    // Multi-collection event handlers\n    newSocket.on('new-event', (event) => {\n      // Emit normalized event for components to handle\n      newSocket.emit('normalized-event', {\n        ...event,\n        collection: 'events',\n        timestamp: event.timestamp || new Date().toISOString()\n      });\n    });\n\n    // Handle new scan alerts\n    newSocket.on('new-scan-alert', (alert) => {\n      console.log('New scan alert received:', alert);\n      const normalizedEvent = {\n        ...alert,\n        collection: 'scan_alerts',\n        timestamp: new Date().toISOString()\n      };\n      // Assuming onEvent is defined elsewhere or will be added\n      // newSocket.emit('normalized-event', normalizedEvent); \n    });\n\n    // Handle new deception detection\n    newSocket.on('new-deception-activity', (activity) => {\n      console.log('New deception activity received:', activity);\n      const normalizedEvent = {\n        ...activity,\n        collection: 'deception_detection',\n        timestamp: new Date().toISOString()\n      };\n      // Assuming onEvent is defined elsewhere or will be added\n      // newSocket.emit('normalized-event', normalizedEvent); \n    });\n\n    // Legacy event handlers for backward compatibility\n    newSocket.on('new-zeek-alert', (alert) => {\n      console.log('Legacy Zeek alert received:', alert);\n      const normalizedEvent = {\n        ...alert,\n        collection: 'scan_alerts',\n        timestamp: new Date().toISOString()\n      };\n      // Assuming onEvent is defined elsewhere or will be added\n      // newSocket.emit('normalized-event', normalizedEvent); \n    });\n\n    newSocket.on('new-honeypot-event', (event) => {\n      // Emit normalized event for components to handle\n      newSocket.emit('normalized-event', {\n        ...event,\n        collection: 'honeypot_events',\n        timestamp: event.timestamp || new Date().toISOString()\n      });\n    });\n\n    newSocket.on('new-nmap-detection', (event) => {\n      // Special handling for Nmap detections\n      newSocket.emit('normalized-event', {\n        ...event,\n        collection: 'events',\n        event_type: event.event_type || 'nmap_detection',\n        timestamp: event.timestamp || new Date().toISOString(),\n        isNmapDetection: true\n      });\n    });\n\n    // Generic error handler\n    newSocket.on('error', (error) => {\n      logError('üîå WebSocket error:', error);\n    });\n\n    setSocket(newSocket);\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n        reconnectTimeoutRef.current = null;\n      }\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n  }, []); // Removed problematic dependencies\n\n  // Subscribe to events\n  const subscribe = useCallback((eventName, handler) => {\n    if (!socket) return () => {};\n\n    socket.on(eventName, handler);\n\n    // Return unsubscribe function\n    return () => {\n      if (socket) {\n        socket.off(eventName, handler);\n      }\n    };\n  }, [socket]);\n\n  // Unsubscribe from events\n  const unsubscribe = useCallback((eventName, handler) => {\n    if (!socket) return;\n    socket.off(eventName, handler);\n  }, [socket]);\n\n  // Subscribe to health updates\n  const subscribeToHealth = useCallback(() => {\n    if (socket && isConnected) {\n      socket.emit('subscribe-health');\n      setIsHealthSubscribed(true);\n      isHealthSubscribedRef.current = true;\n    }\n  }, [socket, isConnected]);\n\n  // Unsubscribe from health updates\n  const unsubscribeFromHealth = useCallback(() => {\n    if (socket && isConnected) {\n      socket.emit('unsubscribe-health');\n      setIsHealthSubscribed(false);\n      isHealthSubscribedRef.current = false;\n    }\n  }, [socket, isConnected]);\n\n  // Subscribe to dashboard updates\n  const subscribeToDashboard = useCallback(() => {\n    if (socket && isConnected) {\n      socket.emit('subscribe-dashboard');\n      setIsDashboardSubscribed(true);\n      isDashboardSubscribedRef.current = true;\n    }\n  }, [socket, isConnected]);\n\n  // Unsubscribe from dashboard updates\n  const unsubscribeFromDashboard = useCallback(() => {\n    if (socket && isConnected) {\n      socket.emit('unsubscribe-dashboard');\n      setIsDashboardSubscribed(false);\n      isDashboardSubscribedRef.current = false;\n    }\n  }, [socket, isConnected]);\n\n  // Subscribe to specific data type updates\n  const subscribeToDataType = useCallback((dataType) => {\n    if (socket && isConnected && dataType) {\n      socket.emit('subscribe-data-type', dataType);\n    }\n  }, [socket, isConnected]);\n\n  // Unsubscribe from specific data type updates\n  const unsubscribeFromDataType = useCallback((dataType) => {\n    if (socket && isConnected && dataType) {\n      socket.emit('unsubscribe-data-type', dataType);\n    }\n  }, [socket, isConnected]);\n\n  // Join honeypot room\n  const joinHoneypotRoom = useCallback((honeypotId) => {\n    if (!socket || !honeypotId) return;\n    socket.emit('join-honeypot', honeypotId);\n  }, [socket]);\n\n  // Leave honeypot room\n  const leaveHoneypotRoom = useCallback((honeypotId) => {\n    if (!socket || !honeypotId) return;\n    socket.emit('leave-honeypot', honeypotId);\n  }, [socket]);\n\n  // Subscribe to enhanced events (multi-collection)\n  const subscribeToEvents = useCallback(() => {\n    if (!socket) return;\n    socket.emit('subscribe-events');\n  }, [socket]);\n\n  // Unsubscribe from enhanced events\n  const unsubscribeFromEvents = useCallback(() => {\n    if (!socket) return;\n    socket.emit('unsubscribe-events');\n  }, [socket]);\n\n  // Subscribe to Nmap detections specifically\n  const subscribeToNmapDetections = useCallback(() => {\n    if (!socket) return;\n    socket.emit('subscribe-nmap-detections');\n  }, [socket]);\n\n  // Unsubscribe from Nmap detections\n  const unsubscribeFromNmapDetections = useCallback(() => {\n    if (!socket) return;\n    socket.emit('unsubscribe-nmap-detections');\n  }, [socket]);\n\n  // Subscribe to threat feed updates\n  const subscribeToThreatFeed = useCallback(() => {\n    if (!socket) return;\n    socket.emit('subscribe-threat-feed');\n  }, [socket]);\n\n  // Unsubscribe from threat feed updates\n  const unsubscribeFromThreatFeed = useCallback(() => {\n    if (!socket) return;\n    socket.emit('unsubscribe-threat-feed');\n  }, [socket]);\n\n  // Force reconnect function\n  const forceReconnect = useCallback(() => {\n    if (socketRef.current) {\n      reconnectAttemptsRef.current = 0;\n      socketRef.current.disconnect();\n      socketRef.current.connect();\n    }\n  }, []);\n\n  return {\n    socket,\n    isConnected,\n    subscribe,\n    unsubscribe,\n    subscribeToHealth,\n    unsubscribeFromHealth,\n    healthStatus,\n    isHealthSubscribed,\n    subscribeToDashboard,\n    unsubscribeFromDashboard,\n    dashboardStatus,\n    isDashboardSubscribed,\n    joinHoneypotRoom,\n    leaveHoneypotRoom,\n    subscribeToEvents,\n    unsubscribeFromEvents,\n    subscribeToNmapDetections,\n    unsubscribeFromNmapDetections,\n    subscribeToThreatFeed,\n    unsubscribeFromThreatFeed,\n    forceReconnect\n  };\n};\n\nexport default useWebSocket; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}