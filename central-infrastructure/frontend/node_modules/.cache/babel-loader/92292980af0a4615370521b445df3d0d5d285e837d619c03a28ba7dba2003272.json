{"ast":null,"code":"// Enhanced data processing utilities for streamlined database structure\n// Handles scan_alerts and deception_detection collections per Connection.md\n/**\n * Normalize event data from different collections into a unified format\n */export const normalizeEvent=function(event){var _event$details,_event$details2,_event$details3,_event$details4;let collection=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'auto';console.log('ðŸ”§ normalizeEvent called with:',{event,collection});// Auto-detect collection type if not specified\nif(collection==='auto'){if(event.note_type&&event.source_ip&&event.dest_port){collection='scan_alerts';// Primary scan alerts collection\nconsole.log('ðŸ”§ Auto-detected collection: scan_alerts');}else if(event.note_type&&event.source_ip&&event.attack_category==='honeypot_engagement'){collection='deception_detection';// Honeypot deception detection\nconsole.log('ðŸ”§ Auto-detected collection: deception_detection');}else if(event.event_type&&event.protocol&&event.source_ip){collection='legacy_events';// Legacy events collection\nconsole.log('ðŸ”§ Auto-detected collection: legacy_events');}else{console.log('ðŸ”§ Could not auto-detect collection, using unknown');collection='unknown';}}const baseEvent={id:event._id||event.id,timestamp:event.timestamp,collection:collection};console.log('ðŸ”§ Base event created:',baseEvent);switch(collection){case'scan_alerts':const scanAlert={...baseEvent,source_ip:event.source_ip||event.attackerIP,severity:event.severity||mapThreatLevelToSeverity(event.threatLevel||'medium'),event_type:event.note_type||event.alertType,protocol:extractProtocolFromPort(event.dest_port),dest_port:event.dest_port,message:event.message,uid:event.uid,client_id:event.clientId,threat_level:event.threatLevel||event.severity||'medium',source:event.source||'enhanced_zeek',description:event.message||'Network security alert',category:event.attack_category||'network_scan',scan_type:(_event$details=event.details)===null||_event$details===void 0?void 0:_event$details.scan_type,user_agent:(_event$details2=event.details)===null||_event$details2===void 0?void 0:_event$details2.user_agent,target_path:(_event$details3=event.details)===null||_event$details3===void 0?void 0:_event$details3.path,method:(_event$details4=event.details)===null||_event$details4===void 0?void 0:_event$details4.method};console.log('ðŸ”§ Normalized scan alert:',scanAlert);return scanAlert;case'deception_detection':const deceptionEvent={...baseEvent,source_ip:event.source_ip||event.attackerIP,severity:event.severity||mapThreatLevelToSeverity(event.threatLevel||'medium'),event_type:event.note_type||event.alertType,protocol:extractProtocolFromPort(event.dest_port),dest_port:event.dest_port,message:event.message,uid:event.uid,client_id:event.clientId,threat_level:event.threatLevel||event.severity||'medium',source:event.source||'deception_engine',description:event.message||'Honeypot interaction detected',category:event.attack_category||'honeypot_engagement',honeypot_id:event.dest_port,session_id:event.uid};console.log('ðŸ”§ Normalized deception event:',deceptionEvent);return deceptionEvent;case'legacy_events':const legacyEvent={...baseEvent,source_ip:event.source_ip,severity:event.severity||'medium',event_type:event.event_type||'interaction',protocol:event.protocol,honeypot_id:event.honeypot_id,session_id:event.session_id,description:event.description||'Legacy event',category:'legacy_event'};console.log('ðŸ”§ Normalized legacy event:',legacyEvent);return legacyEvent;default:console.log('ðŸ”§ Using default event normalization');return baseEvent;}};/**\n * Generate human-readable description for events\n */export const generateEventDescription=event=>{if(event.event_type==='nmap_recon'){var _event$data;return`Nmap reconnaissance scan detected${(_event$data=event.data)!==null&&_event$data!==void 0&&_event$data.scan_type?` (${event.data.scan_type})`:''}`;}if(event.event_type==='nmap_aggressive'){var _event$data2;return`Nmap aggressive scan detected${(_event$data2=event.data)!==null&&_event$data2!==void 0&&_event$data2.scan_type?` (${event.data.scan_type})`:''}`;}if(event.event_type==='login_attempt'){return`Login attempt on ${event.protocol||'unknown'} service`;}if(event.event_type==='command_execution'){return`Command execution attempt detected`;}if(event.event_type==='file_transfer'){return`File transfer attempt on ${event.protocol||'unknown'} service`;}if(event.event_type==='session'){return`Interactive session on ${event.protocol||'unknown'} service`;}return event.description||`${event.event_type||'Unknown'} event detected`;};/**\n * Map threat levels to severity for consistency\n */export const mapThreatLevelToSeverity=threatLevel=>{const mapping={'critical':'high','high':'high','medium':'medium','low':'low','info':'low'};return mapping[threatLevel===null||threatLevel===void 0?void 0:threatLevel.toLowerCase()]||'medium';};/**\n * Extract protocol from port string (e.g., \"22/tcp\" -> \"ssh\")\n */export const extractProtocolFromPort=portString=>{if(!portString)return'unknown';const port=portString.split('/')[0];const protocolMap={'22':'ssh','21':'ftp','23':'telnet','80':'http','443':'https','25':'smtp','53':'dns','110':'pop3','143':'imap','993':'imaps','995':'pop3s'};return protocolMap[port]||portString;};/**\n * Get enhanced threat level based on event type and content\n */export const getThreatLevel=event=>{if(event.collection==='scan_alerts'){return event.threat_level||event.severity||'medium';}if(event.collection==='deception_detection'){return event.threat_level||event.severity||'medium';}if(event.collection==='legacy_events'){switch(event.event_type){case'nmap_aggressive':case'command_execution':return'high';case'nmap_recon':case'login_attempt':case'file_transfer':return'medium';case'session':return'low';default:return event.severity||'low';}}return event.severity||'low';};/**\n * Get color for severity/threat level\n */export const getSeverityColor=severity=>{const colors={'critical':'#dc3545','high':'#dc3545','medium':'#ffc107','low':'#28a745','info':'#17a2b8'};return colors[severity===null||severity===void 0?void 0:severity.toLowerCase()]||colors.medium;};/**\n * Combine and sort events from multiple collections\n */export const combineAndSortEvents=eventCollections=>{const allEvents=[];// Process each collection\nObject.entries(eventCollections).forEach(_ref=>{let[collection,events]=_ref;if(Array.isArray(events)){events.forEach(event=>{allEvents.push(normalizeEvent(event,collection));});}});// Sort by timestamp (newest first)\nreturn allEvents.sort((a,b)=>new Date(b.timestamp)-new Date(a.timestamp));};/**\n * Calculate threat statistics for dashboard\n */export const calculateThreatStats=events=>{console.log('ðŸ”§ calculateThreatStats called with events:',events);const stats={total:events.length,high:0,medium:0,low:0,critical:0,info:0,byProtocol:{},byEventType:{},byCollection:{},nmapDetections:0,activeIPs:new Set(),topAttackers:{}};console.log('ðŸ”§ Initial stats object:',stats);events.forEach((event,index)=>{var _event$event_type;console.log(`ðŸ”§ Processing event ${index}:`,event);const severity=getThreatLevel(event);console.log(`ðŸ”§ Event ${index} severity:`,severity);stats[severity]=(stats[severity]||0)+1;// Protocol distribution\nif(event.protocol){stats.byProtocol[event.protocol]=(stats.byProtocol[event.protocol]||0)+1;}// Event type distribution\nif(event.event_type){stats.byEventType[event.event_type]=(stats.byEventType[event.event_type]||0)+1;}// Collection distribution\nstats.byCollection[event.collection]=(stats.byCollection[event.collection]||0)+1;// Nmap detection count\nif((_event$event_type=event.event_type)!==null&&_event$event_type!==void 0&&_event$event_type.includes('nmap')||event.scan_type){stats.nmapDetections++;}// Active IPs\nif(event.source_ip){stats.activeIPs.add(event.source_ip);stats.topAttackers[event.source_ip]=(stats.topAttackers[event.source_ip]||0)+1;}});// Convert active IPs to count\nstats.uniqueIPs=stats.activeIPs.size;delete stats.activeIPs;// Sort top attackers\nstats.topAttackers=Object.entries(stats.topAttackers).sort((_ref2,_ref3)=>{let[,a]=_ref2;let[,b]=_ref3;return b-a;}).slice(0,10).reduce((obj,_ref4)=>{let[ip,count]=_ref4;obj[ip]=count;return obj;},{});console.log('ðŸ”§ Final calculated stats:',stats);return stats;};/**\n * Create timeline data for charts\n */export const createTimelineData=function(events){let hours=arguments.length>1&&arguments[1]!==undefined?arguments[1]:24;const now=new Date();const timeSlots={};// Initialize time slots\nfor(let i=0;i<hours;i++){const time=new Date(now.getTime()-i*60*60*1000);const hour=time.getHours();const key=`${time.getFullYear()}-${String(time.getMonth()+1).padStart(2,'0')}-${String(time.getDate()).padStart(2,'0')} ${String(hour).padStart(2,'0')}:00`;timeSlots[key]={timestamp:key,total:0,high:0,medium:0,low:0,nmap:0};}// Count events in each time slot\nevents.forEach(event=>{const eventTime=new Date(event.timestamp);const hour=eventTime.getHours();const key=`${eventTime.getFullYear()}-${String(eventTime.getMonth()+1).padStart(2,'0')}-${String(eventTime.getDate()).padStart(2,'0')} ${String(hour).padStart(2,'0')}:00`;if(timeSlots[key]){var _event$event_type2;timeSlots[key].total++;const severity=getThreatLevel(event);timeSlots[key][severity]=(timeSlots[key][severity]||0)+1;if((_event$event_type2=event.event_type)!==null&&_event$event_type2!==void 0&&_event$event_type2.includes('nmap')||event.scan_type){timeSlots[key].nmap++;}}});return Object.values(timeSlots).sort((a,b)=>new Date(a.timestamp)-new Date(b.timestamp));};/**\n * Filter events by various criteria\n */export const filterEvents=(events,filters)=>{return events.filter(event=>{// Severity filter\nif(filters.severity&&filters.severity.length>0){const eventSeverity=getThreatLevel(event);if(!filters.severity.includes(eventSeverity))return false;}// Protocol filter\nif(filters.protocol&&filters.protocol.length>0){if(!filters.protocol.includes(event.protocol))return false;}// Event type filter\nif(filters.eventType&&filters.eventType.length>0){if(!filters.eventType.includes(event.event_type))return false;}// Source IP filter\nif(filters.sourceIP&&filters.sourceIP.trim()){var _event$source_ip;if(!((_event$source_ip=event.source_ip)!==null&&_event$source_ip!==void 0&&_event$source_ip.includes(filters.sourceIP.trim())))return false;}// Collection filter\nif(filters.collection&&filters.collection.length>0){if(!filters.collection.includes(event.collection))return false;}// Time range filter\nif(filters.timeRange){const eventTime=new Date(event.timestamp);const now=new Date();const hoursAgo=now.getTime()-filters.timeRange*60*60*1000;if(eventTime.getTime()<hoursAgo)return false;}// Search query filter\nif(filters.search&&filters.search.trim()){const query=filters.search.trim().toLowerCase();const searchableText=[event.source_ip,event.event_type,event.protocol,event.description,event.scan_type,event.user_agent,event.message].filter(Boolean).join(' ').toLowerCase();if(!searchableText.includes(query))return false;}return true;});};/**\n * Export events to CSV format\n */export const exportEventsToCSV=events=>{const headers=['Timestamp','Source IP','Event Type','Severity','Protocol','Scan Type','Description','Collection','Honeypot ID','User Agent','Target Path'];const csvData=events.map(event=>[event.timestamp,event.source_ip||'',event.event_type||'',getThreatLevel(event),event.protocol||'',event.scan_type||'',event.description||'',event.collection||'',event.honeypot_id||'',event.user_agent||'',event.target_path||'']);const csvContent=[headers,...csvData].map(row=>row.map(field=>`\"${String(field).replace(/\"/g,'\"\"')}\"`).join(',')).join('\\n');return csvContent;};","map":{"version":3,"names":["normalizeEvent","event","_event$details","_event$details2","_event$details3","_event$details4","collection","arguments","length","undefined","console","log","note_type","source_ip","dest_port","attack_category","event_type","protocol","baseEvent","id","_id","timestamp","scanAlert","attackerIP","severity","mapThreatLevelToSeverity","threatLevel","alertType","extractProtocolFromPort","message","uid","client_id","clientId","threat_level","source","description","category","scan_type","details","user_agent","target_path","path","method","deceptionEvent","honeypot_id","session_id","legacyEvent","generateEventDescription","_event$data","data","_event$data2","mapping","toLowerCase","portString","port","split","protocolMap","getThreatLevel","getSeverityColor","colors","medium","combineAndSortEvents","eventCollections","allEvents","Object","entries","forEach","_ref","events","Array","isArray","push","sort","a","b","Date","calculateThreatStats","stats","total","high","low","critical","info","byProtocol","byEventType","byCollection","nmapDetections","activeIPs","Set","topAttackers","index","_event$event_type","includes","add","uniqueIPs","size","_ref2","_ref3","slice","reduce","obj","_ref4","ip","count","createTimelineData","hours","now","timeSlots","i","time","getTime","hour","getHours","key","getFullYear","String","getMonth","padStart","getDate","nmap","eventTime","_event$event_type2","values","filterEvents","filters","filter","eventSeverity","eventType","sourceIP","trim","_event$source_ip","timeRange","hoursAgo","search","query","searchableText","Boolean","join","exportEventsToCSV","headers","csvData","map","csvContent","row","field","replace"],"sources":["/home/demon/distributed-architecture/central-infrastructure/frontend/src/utils/dataProcessor.js"],"sourcesContent":["// Enhanced data processing utilities for streamlined database structure\n// Handles scan_alerts and deception_detection collections per Connection.md\n\n/**\n * Normalize event data from different collections into a unified format\n */\nexport const normalizeEvent = (event, collection = 'auto') => {\n  console.log('ðŸ”§ normalizeEvent called with:', { event, collection });\n  \n  // Auto-detect collection type if not specified\n  if (collection === 'auto') {\n    if (event.note_type && event.source_ip && event.dest_port) {\n      collection = 'scan_alerts'; // Primary scan alerts collection\n      console.log('ðŸ”§ Auto-detected collection: scan_alerts');\n    } else if (event.note_type && event.source_ip && event.attack_category === 'honeypot_engagement') {\n      collection = 'deception_detection'; // Honeypot deception detection\n      console.log('ðŸ”§ Auto-detected collection: deception_detection');\n    } else if (event.event_type && event.protocol && event.source_ip) {\n      collection = 'legacy_events'; // Legacy events collection\n      console.log('ðŸ”§ Auto-detected collection: legacy_events');\n    } else {\n      console.log('ðŸ”§ Could not auto-detect collection, using unknown');\n      collection = 'unknown';\n    }\n  }\n\n  const baseEvent = {\n    id: event._id || event.id,\n    timestamp: event.timestamp,\n    collection: collection\n  };\n\n  console.log('ðŸ”§ Base event created:', baseEvent);\n\n  switch (collection) {\n    case 'scan_alerts':\n      const scanAlert = {\n        ...baseEvent,\n        source_ip: event.source_ip || event.attackerIP,\n        severity: event.severity || mapThreatLevelToSeverity(event.threatLevel || 'medium'),\n        event_type: event.note_type || event.alertType,\n        protocol: extractProtocolFromPort(event.dest_port),\n        dest_port: event.dest_port,\n        message: event.message,\n        uid: event.uid,\n        client_id: event.clientId,\n        threat_level: event.threatLevel || event.severity || 'medium',\n        source: event.source || 'enhanced_zeek',\n        description: event.message || 'Network security alert',\n        category: event.attack_category || 'network_scan',\n        scan_type: event.details?.scan_type,\n        user_agent: event.details?.user_agent,\n        target_path: event.details?.path,\n        method: event.details?.method\n      };\n      console.log('ðŸ”§ Normalized scan alert:', scanAlert);\n      return scanAlert;\n\n    case 'deception_detection':\n      const deceptionEvent = {\n        ...baseEvent,\n        source_ip: event.source_ip || event.attackerIP,\n        severity: event.severity || mapThreatLevelToSeverity(event.threatLevel || 'medium'),\n        event_type: event.note_type || event.alertType,\n        protocol: extractProtocolFromPort(event.dest_port),\n        dest_port: event.dest_port,\n        message: event.message,\n        uid: event.uid,\n        client_id: event.clientId,\n        threat_level: event.threatLevel || event.severity || 'medium',\n        source: event.source || 'deception_engine',\n        description: event.message || 'Honeypot interaction detected',\n        category: event.attack_category || 'honeypot_engagement',\n        honeypot_id: event.dest_port,\n        session_id: event.uid\n      };\n      console.log('ðŸ”§ Normalized deception event:', deceptionEvent);\n      return deceptionEvent;\n\n    case 'legacy_events':\n      const legacyEvent = {\n        ...baseEvent,\n        source_ip: event.source_ip,\n        severity: event.severity || 'medium',\n        event_type: event.event_type || 'interaction',\n        protocol: event.protocol,\n        honeypot_id: event.honeypot_id,\n        session_id: event.session_id,\n        description: event.description || 'Legacy event',\n        category: 'legacy_event'\n      };\n      console.log('ðŸ”§ Normalized legacy event:', legacyEvent);\n      return legacyEvent;\n\n    default:\n      console.log('ðŸ”§ Using default event normalization');\n      return baseEvent;\n  }\n};\n\n/**\n * Generate human-readable description for events\n */\nexport const generateEventDescription = (event) => {\n  if (event.event_type === 'nmap_recon') {\n    return `Nmap reconnaissance scan detected${event.data?.scan_type ? ` (${event.data.scan_type})` : ''}`;\n  }\n  if (event.event_type === 'nmap_aggressive') {\n    return `Nmap aggressive scan detected${event.data?.scan_type ? ` (${event.data.scan_type})` : ''}`;\n  }\n  if (event.event_type === 'login_attempt') {\n    return `Login attempt on ${event.protocol || 'unknown'} service`;\n  }\n  if (event.event_type === 'command_execution') {\n    return `Command execution attempt detected`;\n  }\n  if (event.event_type === 'file_transfer') {\n    return `File transfer attempt on ${event.protocol || 'unknown'} service`;\n  }\n  if (event.event_type === 'session') {\n    return `Interactive session on ${event.protocol || 'unknown'} service`;\n  }\n  return event.description || `${event.event_type || 'Unknown'} event detected`;\n};\n\n/**\n * Map threat levels to severity for consistency\n */\nexport const mapThreatLevelToSeverity = (threatLevel) => {\n  const mapping = {\n    'critical': 'high',\n    'high': 'high',\n    'medium': 'medium',\n    'low': 'low',\n    'info': 'low'\n  };\n  return mapping[threatLevel?.toLowerCase()] || 'medium';\n};\n\n/**\n * Extract protocol from port string (e.g., \"22/tcp\" -> \"ssh\")\n */\nexport const extractProtocolFromPort = (portString) => {\n  if (!portString) return 'unknown';\n  \n  const port = portString.split('/')[0];\n  const protocolMap = {\n    '22': 'ssh',\n    '21': 'ftp',\n    '23': 'telnet',\n    '80': 'http',\n    '443': 'https',\n    '25': 'smtp',\n    '53': 'dns',\n    '110': 'pop3',\n    '143': 'imap',\n    '993': 'imaps',\n    '995': 'pop3s'\n  };\n  \n  return protocolMap[port] || portString;\n};\n\n/**\n * Get enhanced threat level based on event type and content\n */\nexport const getThreatLevel = (event) => {\n  if (event.collection === 'scan_alerts') {\n    return event.threat_level || event.severity || 'medium';\n  }\n  if (event.collection === 'deception_detection') {\n    return event.threat_level || event.severity || 'medium';\n  }\n  if (event.collection === 'legacy_events') {\n    switch (event.event_type) {\n      case 'nmap_aggressive':\n      case 'command_execution':\n        return 'high';\n      case 'nmap_recon':\n      case 'login_attempt':\n      case 'file_transfer':\n        return 'medium';\n      case 'session':\n        return 'low';\n      default:\n        return event.severity || 'low';\n    }\n  }\n  \n  return event.severity || 'low';\n};\n\n/**\n * Get color for severity/threat level\n */\nexport const getSeverityColor = (severity) => {\n  const colors = {\n    'critical': '#dc3545',\n    'high': '#dc3545',\n    'medium': '#ffc107',\n    'low': '#28a745',\n    'info': '#17a2b8'\n  };\n  return colors[severity?.toLowerCase()] || colors.medium;\n};\n\n/**\n * Combine and sort events from multiple collections\n */\nexport const combineAndSortEvents = (eventCollections) => {\n  const allEvents = [];\n  \n  // Process each collection\n  Object.entries(eventCollections).forEach(([collection, events]) => {\n    if (Array.isArray(events)) {\n      events.forEach(event => {\n        allEvents.push(normalizeEvent(event, collection));\n      });\n    }\n  });\n  \n  // Sort by timestamp (newest first)\n  return allEvents.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n};\n\n/**\n * Calculate threat statistics for dashboard\n */\nexport const calculateThreatStats = (events) => {\n  console.log('ðŸ”§ calculateThreatStats called with events:', events);\n  \n  const stats = {\n    total: events.length,\n    high: 0,\n    medium: 0,\n    low: 0,\n    critical: 0,\n    info: 0,\n    byProtocol: {},\n    byEventType: {},\n    byCollection: {},\n    nmapDetections: 0,\n    activeIPs: new Set(),\n    topAttackers: {}\n  };\n  \n  console.log('ðŸ”§ Initial stats object:', stats);\n  \n  events.forEach((event, index) => {\n    console.log(`ðŸ”§ Processing event ${index}:`, event);\n    \n    const severity = getThreatLevel(event);\n    console.log(`ðŸ”§ Event ${index} severity:`, severity);\n    \n    stats[severity] = (stats[severity] || 0) + 1;\n    \n    // Protocol distribution\n    if (event.protocol) {\n      stats.byProtocol[event.protocol] = (stats.byProtocol[event.protocol] || 0) + 1;\n    }\n    \n    // Event type distribution\n    if (event.event_type) {\n      stats.byEventType[event.event_type] = (stats.byEventType[event.event_type] || 0) + 1;\n    }\n    \n    // Collection distribution\n    stats.byCollection[event.collection] = (stats.byCollection[event.collection] || 0) + 1;\n    \n    // Nmap detection count\n    if (event.event_type?.includes('nmap') || event.scan_type) {\n      stats.nmapDetections++;\n    }\n    \n    // Active IPs\n    if (event.source_ip) {\n      stats.activeIPs.add(event.source_ip);\n      stats.topAttackers[event.source_ip] = (stats.topAttackers[event.source_ip] || 0) + 1;\n    }\n  });\n  \n  // Convert active IPs to count\n  stats.uniqueIPs = stats.activeIPs.size;\n  delete stats.activeIPs;\n  \n  // Sort top attackers\n  stats.topAttackers = Object.entries(stats.topAttackers)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 10)\n    .reduce((obj, [ip, count]) => {\n      obj[ip] = count;\n      return obj;\n    }, {});\n  \n  console.log('ðŸ”§ Final calculated stats:', stats);\n  return stats;\n};\n\n/**\n * Create timeline data for charts\n */\nexport const createTimelineData = (events, hours = 24) => {\n  const now = new Date();\n  const timeSlots = {};\n  \n  // Initialize time slots\n  for (let i = 0; i < hours; i++) {\n    const time = new Date(now.getTime() - i * 60 * 60 * 1000);\n    const hour = time.getHours();\n    const key = `${time.getFullYear()}-${String(time.getMonth() + 1).padStart(2, '0')}-${String(time.getDate()).padStart(2, '0')} ${String(hour).padStart(2, '0')}:00`;\n    timeSlots[key] = {\n      timestamp: key,\n      total: 0,\n      high: 0,\n      medium: 0,\n      low: 0,\n      nmap: 0\n    };\n  }\n  \n  // Count events in each time slot\n  events.forEach(event => {\n    const eventTime = new Date(event.timestamp);\n    const hour = eventTime.getHours();\n    const key = `${eventTime.getFullYear()}-${String(eventTime.getMonth() + 1).padStart(2, '0')}-${String(eventTime.getDate()).padStart(2, '0')} ${String(hour).padStart(2, '0')}:00`;\n    \n    if (timeSlots[key]) {\n      timeSlots[key].total++;\n      const severity = getThreatLevel(event);\n      timeSlots[key][severity] = (timeSlots[key][severity] || 0) + 1;\n      \n      if (event.event_type?.includes('nmap') || event.scan_type) {\n        timeSlots[key].nmap++;\n      }\n    }\n  });\n  \n  return Object.values(timeSlots).sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n};\n\n/**\n * Filter events by various criteria\n */\nexport const filterEvents = (events, filters) => {\n  return events.filter(event => {\n    // Severity filter\n    if (filters.severity && filters.severity.length > 0) {\n      const eventSeverity = getThreatLevel(event);\n      if (!filters.severity.includes(eventSeverity)) return false;\n    }\n    \n    // Protocol filter\n    if (filters.protocol && filters.protocol.length > 0) {\n      if (!filters.protocol.includes(event.protocol)) return false;\n    }\n    \n    // Event type filter\n    if (filters.eventType && filters.eventType.length > 0) {\n      if (!filters.eventType.includes(event.event_type)) return false;\n    }\n    \n    // Source IP filter\n    if (filters.sourceIP && filters.sourceIP.trim()) {\n      if (!event.source_ip?.includes(filters.sourceIP.trim())) return false;\n    }\n    \n    // Collection filter\n    if (filters.collection && filters.collection.length > 0) {\n      if (!filters.collection.includes(event.collection)) return false;\n    }\n    \n    // Time range filter\n    if (filters.timeRange) {\n      const eventTime = new Date(event.timestamp);\n      const now = new Date();\n      const hoursAgo = now.getTime() - (filters.timeRange * 60 * 60 * 1000);\n      if (eventTime.getTime() < hoursAgo) return false;\n    }\n    \n    // Search query filter\n    if (filters.search && filters.search.trim()) {\n      const query = filters.search.trim().toLowerCase();\n      const searchableText = [\n        event.source_ip,\n        event.event_type,\n        event.protocol,\n        event.description,\n        event.scan_type,\n        event.user_agent,\n        event.message\n      ].filter(Boolean).join(' ').toLowerCase();\n      \n      if (!searchableText.includes(query)) return false;\n    }\n    \n    return true;\n  });\n};\n\n/**\n * Export events to CSV format\n */\nexport const exportEventsToCSV = (events) => {\n  const headers = [\n    'Timestamp',\n    'Source IP',\n    'Event Type',\n    'Severity',\n    'Protocol',\n    'Scan Type',\n    'Description',\n    'Collection',\n    'Honeypot ID',\n    'User Agent',\n    'Target Path'\n  ];\n  \n  const csvData = events.map(event => [\n    event.timestamp,\n    event.source_ip || '',\n    event.event_type || '',\n    getThreatLevel(event),\n    event.protocol || '',\n    event.scan_type || '',\n    event.description || '',\n    event.collection || '',\n    event.honeypot_id || '',\n    event.user_agent || '',\n    event.target_path || ''\n  ]);\n  \n  const csvContent = [headers, ...csvData]\n    .map(row => row.map(field => `\"${String(field).replace(/\"/g, '\"\"')}\"`).join(','))\n    .join('\\n');\n  \n  return csvContent;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}