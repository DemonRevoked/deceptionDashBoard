{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useCallback, useRef } from 'react';\nimport useWebSocket from './useWebSocket';\nimport toast from 'react-hot-toast';\nconst useRealTimeEvents = (options = {}) => {\n  _s();\n  const {\n    maxEvents = 100,\n    enableNotifications = true,\n    honeypotId = null,\n    enableSecurityAlerts = true,\n    category = null\n  } = options;\n  const {\n    socket,\n    isConnected,\n    subscribe,\n    unsubscribe,\n    joinHoneypotRoom,\n    leaveHoneypotRoom\n  } = useWebSocket();\n  const [events, setEvents] = useState([]);\n  const [honeypotStatuses, setHoneypotStatuses] = useState({});\n  const [securityAlerts, setSecurityAlerts] = useState([]);\n\n  // Use refs to store cleanup functions\n  const unsubscribeFunctionsRef = useRef([]);\n  const previousHoneypotIdRef = useRef(null);\n\n  // Handle new events with error boundary\n  const handleNewEvent = useCallback(event => {\n    try {\n      if (!event || typeof event !== 'object') {\n        console.warn('Invalid event received:', event);\n        return;\n      }\n      setEvents(prevEvents => {\n        const newEvents = [event, ...prevEvents];\n        return newEvents.slice(0, maxEvents);\n      });\n\n      // Show notification for important events\n      if (enableNotifications && event.severity && ['high', 'critical'].includes(event.severity)) {\n        toast.error(`ðŸš¨ ${event.event_type} from ${event.source_ip}`, {\n          duration: 5000,\n          position: 'top-right',\n          style: {\n            background: '#ef4444',\n            color: '#ffffff'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error handling new event:', error);\n    }\n  }, [maxEvents, enableNotifications]);\n\n  // Handle honeypot-specific events with validation\n  const handleHoneypotEvent = useCallback(event => {\n    try {\n      if (!event || typeof event !== 'object') {\n        console.warn('Invalid honeypot event received:', event);\n        return;\n      }\n\n      // Only add to events if it's for the current honeypot or no specific honeypot\n      if (!honeypotId || event.honeypot_id === honeypotId) {\n        handleNewEvent(event);\n      }\n    } catch (error) {\n      console.error('Error handling honeypot event:', error);\n    }\n  }, [honeypotId, handleNewEvent]);\n\n  // Handle security alerts with validation\n  const handleSecurityAlert = useCallback(alert => {\n    try {\n      if (!alert || typeof alert !== 'object') {\n        console.warn('Invalid security alert received:', alert);\n        return;\n      }\n      setSecurityAlerts(prevAlerts => {\n        const newAlerts = [alert, ...prevAlerts];\n        return newAlerts.slice(0, 50); // Keep last 50 alerts\n      });\n      if (enableSecurityAlerts && alert.message) {\n        toast.error(alert.message, {\n          duration: 8000,\n          position: 'top-center',\n          style: {\n            background: '#dc2626',\n            color: '#ffffff',\n            fontWeight: 'bold'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error handling security alert:', error);\n    }\n  }, [enableSecurityAlerts]);\n\n  // Handle honeypot status updates with validation\n  const handleHoneypotStatusUpdate = useCallback(statusUpdate => {\n    try {\n      if (!statusUpdate || typeof statusUpdate !== 'object' || !statusUpdate.honeypot_id) {\n        console.warn('Invalid honeypot status update:', statusUpdate);\n        return;\n      }\n      setHoneypotStatuses(prevStatuses => ({\n        ...prevStatuses,\n        [statusUpdate.honeypot_id]: statusUpdate\n      }));\n\n      // Show notification for status changes\n      if (enableNotifications && statusUpdate.name && statusUpdate.status) {\n        const statusEmoji = statusUpdate.status === 'running' ? 'ðŸŸ¢' : 'ðŸ”´';\n        toast.success(`${statusEmoji} ${statusUpdate.name} is now ${statusUpdate.status}`, {\n          duration: 3000,\n          position: 'bottom-right'\n        });\n      }\n    } catch (error) {\n      console.error('Error handling honeypot status update:', error);\n    }\n  }, [enableNotifications]);\n\n  // Cleanup function\n  const cleanup = useCallback(() => {\n    // Clean up all subscriptions\n    unsubscribeFunctionsRef.current.forEach(unsubscribeFn => {\n      try {\n        if (typeof unsubscribeFn === 'function') {\n          unsubscribeFn();\n        }\n      } catch (error) {\n        console.error('Error during cleanup:', error);\n      }\n    });\n    unsubscribeFunctionsRef.current = [];\n\n    // Leave previous honeypot room if needed\n    if (previousHoneypotIdRef.current) {\n      try {\n        leaveHoneypotRoom(previousHoneypotIdRef.current);\n      } catch (error) {\n        console.error('Error leaving honeypot room:', error);\n      }\n      previousHoneypotIdRef.current = null;\n    }\n  }, [leaveHoneypotRoom]);\n\n  // Subscribe to WebSocket events\n  useEffect(() => {\n    if (socket && isConnected) {\n      // Clean up previous subscriptions\n      cleanup();\n\n      // Subscribe to events with error handling\n      try {\n        const unsubscribeFunctions = [subscribe('new-event', handleNewEvent), subscribe('honeypot-event', handleHoneypotEvent), subscribe('security-alert', handleSecurityAlert), subscribe('honeypot-status-update', handleHoneypotStatusUpdate)].filter(fn => typeof fn === 'function');\n        unsubscribeFunctionsRef.current = unsubscribeFunctions;\n\n        // Join honeypot room if specified\n        if (honeypotId && honeypotId !== previousHoneypotIdRef.current) {\n          // Leave previous room if different\n          if (previousHoneypotIdRef.current) {\n            leaveHoneypotRoom(previousHoneypotIdRef.current);\n          }\n          joinHoneypotRoom(honeypotId);\n          previousHoneypotIdRef.current = honeypotId;\n        }\n      } catch (error) {\n        console.error('Error setting up WebSocket subscriptions:', error);\n      }\n    }\n\n    // Cleanup on dependency change or unmount\n    return cleanup;\n  }, [socket, isConnected, honeypotId\n  // Removed all callback dependencies that were causing infinite loops\n  ]);\n\n  // Clear events\n  const clearEvents = useCallback(() => {\n    setEvents([]);\n    toast.success('Events cleared', {\n      duration: 2000,\n      position: 'bottom-center'\n    });\n  }, []);\n\n  // Clear security alerts\n  const clearSecurityAlerts = useCallback(() => {\n    setSecurityAlerts([]);\n    toast.success('Security alerts cleared', {\n      duration: 2000,\n      position: 'bottom-center'\n    });\n  }, []);\n\n  // Get events by severity\n  const getEventsBySeverity = useCallback(severity => {\n    return events.filter(event => event && event.severity === severity);\n  }, [events]);\n\n  // Get events by honeypot\n  const getEventsByHoneypot = useCallback(honeypotId => {\n    return events.filter(event => event && event.honeypot_id === honeypotId);\n  }, [events]);\n\n  // Get events by category (if specified)\n  const getEventsByCategory = useCallback(cat => {\n    return events.filter(event => event && event.category === cat);\n  }, [events]);\n\n  // Filter events by category if specified\n  const filteredEvents = category ? getEventsByCategory(category) : events;\n  return {\n    events: filteredEvents,\n    honeypotStatuses,\n    securityAlerts,\n    isConnected,\n    clearEvents,\n    clearSecurityAlerts,\n    getEventsBySeverity,\n    getEventsByHoneypot,\n    getEventsByCategory\n  };\n};\n_s(useRealTimeEvents, \"Egks/233t8v8z20cIvHkjMlRymo=\", false, function () {\n  return [useWebSocket];\n});\nexport default useRealTimeEvents;","map":{"version":3,"names":["useEffect","useState","useCallback","useRef","useWebSocket","toast","useRealTimeEvents","options","_s","maxEvents","enableNotifications","honeypotId","enableSecurityAlerts","category","socket","isConnected","subscribe","unsubscribe","joinHoneypotRoom","leaveHoneypotRoom","events","setEvents","honeypotStatuses","setHoneypotStatuses","securityAlerts","setSecurityAlerts","unsubscribeFunctionsRef","previousHoneypotIdRef","handleNewEvent","event","console","warn","prevEvents","newEvents","slice","severity","includes","error","event_type","source_ip","duration","position","style","background","color","handleHoneypotEvent","honeypot_id","handleSecurityAlert","alert","prevAlerts","newAlerts","message","fontWeight","handleHoneypotStatusUpdate","statusUpdate","prevStatuses","name","status","statusEmoji","success","cleanup","current","forEach","unsubscribeFn","unsubscribeFunctions","filter","fn","clearEvents","clearSecurityAlerts","getEventsBySeverity","getEventsByHoneypot","getEventsByCategory","cat","filteredEvents"],"sources":["/home/demon/distributed-architecture/central-infrastructure/frontend/src/hooks/useRealTimeEvents.js"],"sourcesContent":["import { useEffect, useState, useCallback, useRef } from 'react';\nimport useWebSocket from './useWebSocket';\nimport toast from 'react-hot-toast';\n\nconst useRealTimeEvents = (options = {}) => {\n  const { \n    maxEvents = 100, \n    enableNotifications = true, \n    honeypotId = null,\n    enableSecurityAlerts = true,\n    category = null\n  } = options;\n\n  const { socket, isConnected, subscribe, unsubscribe, joinHoneypotRoom, leaveHoneypotRoom } = useWebSocket();\n  const [events, setEvents] = useState([]);\n  const [honeypotStatuses, setHoneypotStatuses] = useState({});\n  const [securityAlerts, setSecurityAlerts] = useState([]);\n  \n  // Use refs to store cleanup functions\n  const unsubscribeFunctionsRef = useRef([]);\n  const previousHoneypotIdRef = useRef(null);\n\n  // Handle new events with error boundary\n  const handleNewEvent = useCallback((event) => {\n    try {\n      if (!event || typeof event !== 'object') {\n        console.warn('Invalid event received:', event);\n        return;\n      }\n      \n      setEvents(prevEvents => {\n        const newEvents = [event, ...prevEvents];\n        return newEvents.slice(0, maxEvents);\n      });\n\n      // Show notification for important events\n      if (enableNotifications && event.severity && ['high', 'critical'].includes(event.severity)) {\n        toast.error(`ðŸš¨ ${event.event_type} from ${event.source_ip}`, {\n          duration: 5000,\n          position: 'top-right',\n          style: {\n            background: '#ef4444',\n            color: '#ffffff',\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error handling new event:', error);\n    }\n  }, [maxEvents, enableNotifications]);\n\n  // Handle honeypot-specific events with validation\n  const handleHoneypotEvent = useCallback((event) => {\n    try {\n      if (!event || typeof event !== 'object') {\n        console.warn('Invalid honeypot event received:', event);\n        return;\n      }\n      \n      // Only add to events if it's for the current honeypot or no specific honeypot\n      if (!honeypotId || event.honeypot_id === honeypotId) {\n        handleNewEvent(event);\n      }\n    } catch (error) {\n      console.error('Error handling honeypot event:', error);\n    }\n  }, [honeypotId, handleNewEvent]);\n\n  // Handle security alerts with validation\n  const handleSecurityAlert = useCallback((alert) => {\n    try {\n      if (!alert || typeof alert !== 'object') {\n        console.warn('Invalid security alert received:', alert);\n        return;\n      }\n      \n      setSecurityAlerts(prevAlerts => {\n        const newAlerts = [alert, ...prevAlerts];\n        return newAlerts.slice(0, 50); // Keep last 50 alerts\n      });\n\n      if (enableSecurityAlerts && alert.message) {\n        toast.error(alert.message, {\n          duration: 8000,\n          position: 'top-center',\n          style: {\n            background: '#dc2626',\n            color: '#ffffff',\n            fontWeight: 'bold'\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error handling security alert:', error);\n    }\n  }, [enableSecurityAlerts]);\n\n  // Handle honeypot status updates with validation\n  const handleHoneypotStatusUpdate = useCallback((statusUpdate) => {\n    try {\n      if (!statusUpdate || typeof statusUpdate !== 'object' || !statusUpdate.honeypot_id) {\n        console.warn('Invalid honeypot status update:', statusUpdate);\n        return;\n      }\n      \n      setHoneypotStatuses(prevStatuses => ({\n        ...prevStatuses,\n        [statusUpdate.honeypot_id]: statusUpdate\n      }));\n\n      // Show notification for status changes\n      if (enableNotifications && statusUpdate.name && statusUpdate.status) {\n        const statusEmoji = statusUpdate.status === 'running' ? 'ðŸŸ¢' : 'ðŸ”´';\n        toast.success(`${statusEmoji} ${statusUpdate.name} is now ${statusUpdate.status}`, {\n          duration: 3000,\n          position: 'bottom-right'\n        });\n      }\n    } catch (error) {\n      console.error('Error handling honeypot status update:', error);\n    }\n  }, [enableNotifications]);\n\n  // Cleanup function\n  const cleanup = useCallback(() => {\n    // Clean up all subscriptions\n    unsubscribeFunctionsRef.current.forEach(unsubscribeFn => {\n      try {\n        if (typeof unsubscribeFn === 'function') {\n          unsubscribeFn();\n        }\n      } catch (error) {\n        console.error('Error during cleanup:', error);\n      }\n    });\n    unsubscribeFunctionsRef.current = [];\n\n    // Leave previous honeypot room if needed\n    if (previousHoneypotIdRef.current) {\n      try {\n        leaveHoneypotRoom(previousHoneypotIdRef.current);\n      } catch (error) {\n        console.error('Error leaving honeypot room:', error);\n      }\n      previousHoneypotIdRef.current = null;\n    }\n  }, [leaveHoneypotRoom]);\n\n  // Subscribe to WebSocket events\n  useEffect(() => {\n    if (socket && isConnected) {\n      // Clean up previous subscriptions\n      cleanup();\n      \n      // Subscribe to events with error handling\n      try {\n        const unsubscribeFunctions = [\n          subscribe('new-event', handleNewEvent),\n          subscribe('honeypot-event', handleHoneypotEvent), \n          subscribe('security-alert', handleSecurityAlert),\n          subscribe('honeypot-status-update', handleHoneypotStatusUpdate)\n        ].filter(fn => typeof fn === 'function');\n\n        unsubscribeFunctionsRef.current = unsubscribeFunctions;\n\n        // Join honeypot room if specified\n        if (honeypotId && honeypotId !== previousHoneypotIdRef.current) {\n          // Leave previous room if different\n          if (previousHoneypotIdRef.current) {\n            leaveHoneypotRoom(previousHoneypotIdRef.current);\n          }\n          \n          joinHoneypotRoom(honeypotId);\n          previousHoneypotIdRef.current = honeypotId;\n        }\n      } catch (error) {\n        console.error('Error setting up WebSocket subscriptions:', error);\n      }\n    }\n\n    // Cleanup on dependency change or unmount\n    return cleanup;\n  }, [\n    socket, \n    isConnected, \n    honeypotId\n    // Removed all callback dependencies that were causing infinite loops\n  ]);\n\n  // Clear events\n  const clearEvents = useCallback(() => {\n    setEvents([]);\n    toast.success('Events cleared', {\n      duration: 2000,\n      position: 'bottom-center'\n    });\n  }, []);\n\n  // Clear security alerts\n  const clearSecurityAlerts = useCallback(() => {\n    setSecurityAlerts([]);\n    toast.success('Security alerts cleared', {\n      duration: 2000,\n      position: 'bottom-center'\n    });\n  }, []);\n\n  // Get events by severity\n  const getEventsBySeverity = useCallback((severity) => {\n    return events.filter(event => event && event.severity === severity);\n  }, [events]);\n\n  // Get events by honeypot\n  const getEventsByHoneypot = useCallback((honeypotId) => {\n    return events.filter(event => event && event.honeypot_id === honeypotId);\n  }, [events]);\n\n  // Get events by category (if specified)\n  const getEventsByCategory = useCallback((cat) => {\n    return events.filter(event => event && event.category === cat);\n  }, [events]);\n\n  // Filter events by category if specified\n  const filteredEvents = category ? getEventsByCategory(category) : events;\n\n  return {\n    events: filteredEvents,\n    honeypotStatuses,\n    securityAlerts,\n    isConnected,\n    clearEvents,\n    clearSecurityAlerts,\n    getEventsBySeverity,\n    getEventsByHoneypot,\n    getEventsByCategory\n  };\n};\n\nexport default useRealTimeEvents; "],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAChE,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,KAAK,MAAM,iBAAiB;AAEnC,MAAMC,iBAAiB,GAAGA,CAACC,OAAO,GAAG,CAAC,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM;IACJC,SAAS,GAAG,GAAG;IACfC,mBAAmB,GAAG,IAAI;IAC1BC,UAAU,GAAG,IAAI;IACjBC,oBAAoB,GAAG,IAAI;IAC3BC,QAAQ,GAAG;EACb,CAAC,GAAGN,OAAO;EAEX,MAAM;IAAEO,MAAM;IAAEC,WAAW;IAAEC,SAAS;IAAEC,WAAW;IAAEC,gBAAgB;IAAEC;EAAkB,CAAC,GAAGf,YAAY,CAAC,CAAC;EAC3G,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMyB,uBAAuB,GAAGvB,MAAM,CAAC,EAAE,CAAC;EAC1C,MAAMwB,qBAAqB,GAAGxB,MAAM,CAAC,IAAI,CAAC;;EAE1C;EACA,MAAMyB,cAAc,GAAG1B,WAAW,CAAE2B,KAAK,IAAK;IAC5C,IAAI;MACF,IAAI,CAACA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACvCC,OAAO,CAACC,IAAI,CAAC,yBAAyB,EAAEF,KAAK,CAAC;QAC9C;MACF;MAEAR,SAAS,CAACW,UAAU,IAAI;QACtB,MAAMC,SAAS,GAAG,CAACJ,KAAK,EAAE,GAAGG,UAAU,CAAC;QACxC,OAAOC,SAAS,CAACC,KAAK,CAAC,CAAC,EAAEzB,SAAS,CAAC;MACtC,CAAC,CAAC;;MAEF;MACA,IAAIC,mBAAmB,IAAImB,KAAK,CAACM,QAAQ,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAACC,QAAQ,CAACP,KAAK,CAACM,QAAQ,CAAC,EAAE;QAC1F9B,KAAK,CAACgC,KAAK,CAAC,MAAMR,KAAK,CAACS,UAAU,SAAST,KAAK,CAACU,SAAS,EAAE,EAAE;UAC5DC,QAAQ,EAAE,IAAI;UACdC,QAAQ,EAAE,WAAW;UACrBC,KAAK,EAAE;YACLC,UAAU,EAAE,SAAS;YACrBC,KAAK,EAAE;UACT;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC,EAAE,CAAC5B,SAAS,EAAEC,mBAAmB,CAAC,CAAC;;EAEpC;EACA,MAAMmC,mBAAmB,GAAG3C,WAAW,CAAE2B,KAAK,IAAK;IACjD,IAAI;MACF,IAAI,CAACA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACvCC,OAAO,CAACC,IAAI,CAAC,kCAAkC,EAAEF,KAAK,CAAC;QACvD;MACF;;MAEA;MACA,IAAI,CAAClB,UAAU,IAAIkB,KAAK,CAACiB,WAAW,KAAKnC,UAAU,EAAE;QACnDiB,cAAc,CAACC,KAAK,CAAC;MACvB;IACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC,EAAE,CAAC1B,UAAU,EAAEiB,cAAc,CAAC,CAAC;;EAEhC;EACA,MAAMmB,mBAAmB,GAAG7C,WAAW,CAAE8C,KAAK,IAAK;IACjD,IAAI;MACF,IAAI,CAACA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACvClB,OAAO,CAACC,IAAI,CAAC,kCAAkC,EAAEiB,KAAK,CAAC;QACvD;MACF;MAEAvB,iBAAiB,CAACwB,UAAU,IAAI;QAC9B,MAAMC,SAAS,GAAG,CAACF,KAAK,EAAE,GAAGC,UAAU,CAAC;QACxC,OAAOC,SAAS,CAAChB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC;MAEF,IAAItB,oBAAoB,IAAIoC,KAAK,CAACG,OAAO,EAAE;QACzC9C,KAAK,CAACgC,KAAK,CAACW,KAAK,CAACG,OAAO,EAAE;UACzBX,QAAQ,EAAE,IAAI;UACdC,QAAQ,EAAE,YAAY;UACtBC,KAAK,EAAE;YACLC,UAAU,EAAE,SAAS;YACrBC,KAAK,EAAE,SAAS;YAChBQ,UAAU,EAAE;UACd;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC,EAAE,CAACzB,oBAAoB,CAAC,CAAC;;EAE1B;EACA,MAAMyC,0BAA0B,GAAGnD,WAAW,CAAEoD,YAAY,IAAK;IAC/D,IAAI;MACF,IAAI,CAACA,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAI,CAACA,YAAY,CAACR,WAAW,EAAE;QAClFhB,OAAO,CAACC,IAAI,CAAC,iCAAiC,EAAEuB,YAAY,CAAC;QAC7D;MACF;MAEA/B,mBAAmB,CAACgC,YAAY,KAAK;QACnC,GAAGA,YAAY;QACf,CAACD,YAAY,CAACR,WAAW,GAAGQ;MAC9B,CAAC,CAAC,CAAC;;MAEH;MACA,IAAI5C,mBAAmB,IAAI4C,YAAY,CAACE,IAAI,IAAIF,YAAY,CAACG,MAAM,EAAE;QACnE,MAAMC,WAAW,GAAGJ,YAAY,CAACG,MAAM,KAAK,SAAS,GAAG,IAAI,GAAG,IAAI;QACnEpD,KAAK,CAACsD,OAAO,CAAC,GAAGD,WAAW,IAAIJ,YAAY,CAACE,IAAI,WAAWF,YAAY,CAACG,MAAM,EAAE,EAAE;UACjFjB,QAAQ,EAAE,IAAI;UACdC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAChE;EACF,CAAC,EAAE,CAAC3B,mBAAmB,CAAC,CAAC;;EAEzB;EACA,MAAMkD,OAAO,GAAG1D,WAAW,CAAC,MAAM;IAChC;IACAwB,uBAAuB,CAACmC,OAAO,CAACC,OAAO,CAACC,aAAa,IAAI;MACvD,IAAI;QACF,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;UACvCA,aAAa,CAAC,CAAC;QACjB;MACF,CAAC,CAAC,OAAO1B,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC,CAAC;IACFX,uBAAuB,CAACmC,OAAO,GAAG,EAAE;;IAEpC;IACA,IAAIlC,qBAAqB,CAACkC,OAAO,EAAE;MACjC,IAAI;QACF1C,iBAAiB,CAACQ,qBAAqB,CAACkC,OAAO,CAAC;MAClD,CAAC,CAAC,OAAOxB,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;MACAV,qBAAqB,CAACkC,OAAO,GAAG,IAAI;IACtC;EACF,CAAC,EAAE,CAAC1C,iBAAiB,CAAC,CAAC;;EAEvB;EACAnB,SAAS,CAAC,MAAM;IACd,IAAIc,MAAM,IAAIC,WAAW,EAAE;MACzB;MACA6C,OAAO,CAAC,CAAC;;MAET;MACA,IAAI;QACF,MAAMI,oBAAoB,GAAG,CAC3BhD,SAAS,CAAC,WAAW,EAAEY,cAAc,CAAC,EACtCZ,SAAS,CAAC,gBAAgB,EAAE6B,mBAAmB,CAAC,EAChD7B,SAAS,CAAC,gBAAgB,EAAE+B,mBAAmB,CAAC,EAChD/B,SAAS,CAAC,wBAAwB,EAAEqC,0BAA0B,CAAC,CAChE,CAACY,MAAM,CAACC,EAAE,IAAI,OAAOA,EAAE,KAAK,UAAU,CAAC;QAExCxC,uBAAuB,CAACmC,OAAO,GAAGG,oBAAoB;;QAEtD;QACA,IAAIrD,UAAU,IAAIA,UAAU,KAAKgB,qBAAqB,CAACkC,OAAO,EAAE;UAC9D;UACA,IAAIlC,qBAAqB,CAACkC,OAAO,EAAE;YACjC1C,iBAAiB,CAACQ,qBAAqB,CAACkC,OAAO,CAAC;UAClD;UAEA3C,gBAAgB,CAACP,UAAU,CAAC;UAC5BgB,qBAAqB,CAACkC,OAAO,GAAGlD,UAAU;QAC5C;MACF,CAAC,CAAC,OAAO0B,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE;IACF;;IAEA;IACA,OAAOuB,OAAO;EAChB,CAAC,EAAE,CACD9C,MAAM,EACNC,WAAW,EACXJ;EACA;EAAA,CACD,CAAC;;EAEF;EACA,MAAMwD,WAAW,GAAGjE,WAAW,CAAC,MAAM;IACpCmB,SAAS,CAAC,EAAE,CAAC;IACbhB,KAAK,CAACsD,OAAO,CAAC,gBAAgB,EAAE;MAC9BnB,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM2B,mBAAmB,GAAGlE,WAAW,CAAC,MAAM;IAC5CuB,iBAAiB,CAAC,EAAE,CAAC;IACrBpB,KAAK,CAACsD,OAAO,CAAC,yBAAyB,EAAE;MACvCnB,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM4B,mBAAmB,GAAGnE,WAAW,CAAEiC,QAAQ,IAAK;IACpD,OAAOf,MAAM,CAAC6C,MAAM,CAACpC,KAAK,IAAIA,KAAK,IAAIA,KAAK,CAACM,QAAQ,KAAKA,QAAQ,CAAC;EACrE,CAAC,EAAE,CAACf,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMkD,mBAAmB,GAAGpE,WAAW,CAAES,UAAU,IAAK;IACtD,OAAOS,MAAM,CAAC6C,MAAM,CAACpC,KAAK,IAAIA,KAAK,IAAIA,KAAK,CAACiB,WAAW,KAAKnC,UAAU,CAAC;EAC1E,CAAC,EAAE,CAACS,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMmD,mBAAmB,GAAGrE,WAAW,CAAEsE,GAAG,IAAK;IAC/C,OAAOpD,MAAM,CAAC6C,MAAM,CAACpC,KAAK,IAAIA,KAAK,IAAIA,KAAK,CAAChB,QAAQ,KAAK2D,GAAG,CAAC;EAChE,CAAC,EAAE,CAACpD,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMqD,cAAc,GAAG5D,QAAQ,GAAG0D,mBAAmB,CAAC1D,QAAQ,CAAC,GAAGO,MAAM;EAExE,OAAO;IACLA,MAAM,EAAEqD,cAAc;IACtBnD,gBAAgB;IAChBE,cAAc;IACdT,WAAW;IACXoD,WAAW;IACXC,mBAAmB;IACnBC,mBAAmB;IACnBC,mBAAmB;IACnBC;EACF,CAAC;AACH,CAAC;AAAC/D,EAAA,CAxOIF,iBAAiB;EAAA,QASwEF,YAAY;AAAA;AAiO3G,eAAeE,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}