{"ast":null,"code":"import axios from 'axios';\n\n// Smart API base URL detection for distributed architecture\nconst getApiBaseUrl = () => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log('🔧 getApiBaseUrl called with:', {\n      hasWindow: typeof window !== 'undefined',\n      hasLocation: typeof window !== 'undefined' && window.location,\n      envApiUrl: process.env.REACT_APP_API_URL,\n      envWsUrl: process.env.REACT_APP_WS_URL\n    });\n  }\n\n  // If we're in a browser environment, dynamically determine from current page location\n  if (typeof window !== 'undefined' && window.location) {\n    // Use environment variable if set, otherwise dynamically determine from current location\n    if (process.env.REACT_APP_API_URL && process.env.REACT_APP_API_URL !== 'undefined') {\n      console.log('🔧 Using environment variable for API URL:', process.env.REACT_APP_API_URL);\n      return process.env.REACT_APP_API_URL;\n    }\n    console.log('🔧 No environment variable set, using dynamic detection');\n\n    // Get current host and construct backend URL\n    const {\n      protocol,\n      hostname\n    } = window.location;\n\n    // Special handling for distributed architecture\n    // If accessing from client VM (10.0.44.3), use VPS backend IP (10.0.44.77)\n    // If accessing from central infrastructure (10.0.44.32), use local backend\n    let targetHost = hostname;\n    if (hostname === '10.0.44.3') {\n      targetHost = '10.0.44.77';\n      console.log('🔧 Client VM detected, routing to VPS backend:', targetHost);\n    } else if (hostname === '10.0.44.32') {\n      targetHost = 'localhost';\n      console.log('🔧 Central infrastructure detected, routing to local backend:', targetHost);\n    }\n    const dynamicUrl = `${protocol}//${targetHost}:5000/api`;\n    console.log('🔧 Dynamic API URL detected:', {\n      currentLocation: window.location.href,\n      protocol,\n      hostname,\n      targetHost,\n      constructedUrl: dynamicUrl,\n      architecture: 'distributed'\n    });\n    return dynamicUrl;\n  }\n\n  // Fallback for SSR or when window.location is not available\n  const fallbackUrl = process.env.REACT_APP_API_URL || 'http://backend:5000/api';\n  console.log('🔧 Using fallback API URL:', fallbackUrl);\n  return fallbackUrl;\n};\n\n// Initialize API_BASE_URL\nlet API_BASE_URL = getApiBaseUrl();\n\n// Function to update API_BASE_URL dynamically (useful for debugging)\nexport const updateApiBaseUrl = () => {\n  API_BASE_URL = getApiBaseUrl();\n  console.log('🔧 Updated API_BASE_URL to:', API_BASE_URL);\n\n  // Update axios baseURL\n  apiClient.defaults.baseURL = API_BASE_URL;\n  return API_BASE_URL;\n};\n\n// Function to get current API base URL\nexport const getCurrentApiBaseUrl = () => {\n  return API_BASE_URL;\n};\n\n// Function to force refresh API configuration (useful when page loads)\nexport const refreshApiConfiguration = () => {\n  console.log('🔧 Refreshing API configuration...');\n  return updateApiBaseUrl();\n};\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 15000,\n  // Increased timeout for health checks that include HoneypotManager\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Log the initial configuration\nconsole.log('🔧 Axios client created with baseURL:', API_BASE_URL);\n\n// Add retry logic for container network issues\napiClient.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Retry for network errors or 5xx server errors\n  if (!originalRequest._retry && (error.code === 'ECONNABORTED' || ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) >= 500 || error.code === 'NETWORK_ERROR')) {\n    originalRequest._retry = true;\n    console.log('Retrying request due to network error...');\n\n    // Wait 1 second before retry\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return apiClient.request(originalRequest);\n  }\n  return Promise.reject(error);\n});\n\n// Set auth token from localStorage\nconst token = localStorage.getItem('authToken');\nif (token) {\n  apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n}\nexport const setAuthToken = token => {\n  if (token) {\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    localStorage.setItem('authToken', token);\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n    localStorage.removeItem('authToken');\n  }\n};\n\n// --- Health Check ---\nexport const checkHealth = async () => {\n  const response = await apiClient.get('/health');\n  return response.data;\n};\nexport const checkQuickHealth = async () => {\n  const response = await apiClient.get('/health/quick');\n  return response.data;\n};\n\n// --- Auth ---\nexport const login = async (username, password) => {\n  const response = await apiClient.post('/auth/login', {\n    username,\n    password\n  });\n  return response.data;\n};\n\n// --- Honeypots ---\nexport const fetchHoneypots = async () => {\n  const response = await apiClient.get('/honeypots');\n  return response.data;\n};\nexport const startHoneypot = async id => {\n  const response = await apiClient.post(`/honeypots/control/${id}/start`);\n  return response.data;\n};\nexport const stopHoneypot = async id => {\n  const response = await apiClient.post(`/honeypots/control/${id}/stop`);\n  return response.data;\n};\nexport const fetchHoneypotStatuses = async () => {\n  const response = await apiClient.get('/honeypots/control/status');\n  return response.data;\n};\n\n// --- Plugin Management ---\nexport const fetchHoneypotPlugins = async id => {\n  const response = await apiClient.get(`/honeypots/${id}/plugins`);\n  return response.data;\n};\nexport const updateHoneypotPlugins = async (id, config) => {\n  const response = await apiClient.put(`/honeypots/${id}/plugins`, config);\n  return response.data;\n};\nexport const rebuildHoneypot = async id => {\n  const response = await apiClient.post(`/honeypots/${id}/rebuild`);\n  return response.data;\n};\n\n// --- Events (Primary Collection as per Connection.md) ---\nexport const fetchEvents = async (params = {}) => {\n  console.warn('fetchEvents is deprecated - use fetchCombinedThreatData instead');\n  // Redirect to the new function\n  const data = await fetchCombinedThreatData(24, params);\n  return data.scanAlerts || [];\n};\nexport const fetchEventsStats = async (params = {}) => {\n  console.warn('fetchEventsStats is deprecated - use fetchScanAlertsStats instead');\n  // Redirect to the new function\n  return await fetchScanAlertsStats(params);\n};\nexport const fetchEventsTimeline = async (params = {}) => {\n  console.warn('fetchEventsTimeline is deprecated - use fetchScanAlerts with time filtering instead');\n  // Return mock data for now\n  return [];\n};\nexport const fetchEventById = async eventId => {\n  const response = await apiClient.get(`/events/${eventId}`);\n  return response.data;\n};\n\n// Legacy honeypot events (secondary collection)\nexport const fetchHoneypotEvents = async (params = {}) => {\n  const response = await apiClient.get('/honeypot-events', {\n    params\n  });\n  return response.data;\n};\nexport const fetchHoneypotEventsStats = async (params = {}) => {\n  const response = await apiClient.get('/honeypot-events/stats', {\n    params\n  });\n  return response.data;\n};\n\n// --- Scan Alerts (Primary Data Source) ---\nexport const fetchScanAlerts = async (params = {}) => {\n  console.log('🔧 fetchScanAlerts called with params:', params);\n  // Use the new scan-alerts endpoint\n  const response = await apiClient.get('/network-security/scan-alerts', {\n    params\n  });\n  console.log('🔧 fetchScanAlerts response:', response.data.length, 'items');\n  return response.data;\n};\n\n// --- Scan Alerts Statistics ---\nexport const fetchScanAlertsStats = async (params = {}) => {\n  console.log('🔧 fetchScanAlertsStats called with params:', params);\n  // Use the new scan-alerts/stats endpoint\n  const response = await apiClient.get('/network-security/scan-alerts/stats', {\n    params\n  });\n  console.log('🔧 fetchScanAlertsStats response:', response.data);\n  return response.data;\n};\n\n// --- Deception Activity (Primary Data Source) ---\nexport const fetchDeceptionActivity = async (params = {}) => {\n  console.log('🔧 fetchDeceptionActivity called with params:', params);\n  // Use the new deception-activity endpoint\n  const response = await apiClient.get('/network-security/deception-activity', {\n    params\n  });\n  console.log('🔧 fetchDeceptionActivity response:', response.data.length, 'items');\n  return response.data;\n};\n\n// --- Legacy Functions (Maintained for backward compatibility) ---\nexport const fetchZeekAlerts = async (params = {}) => {\n  // Redirect to new scan alerts endpoint\n  return fetchScanAlerts(params);\n};\nexport const fetchZeekAlertsStats = async (params = {}) => {\n  // Redirect to new alerts stats endpoint\n  return fetchScanAlertsStats(params);\n};\n\n// --- Combined Threat Data (Primary Function) ---\nexport const fetchCombinedThreatData = async (timeframe = 24, params = {}) => {\n  try {\n    var _scanAlertsData$value, _deceptionActivityDat;\n    console.log('🔧 fetchCombinedThreatData called with:', {\n      timeframe,\n      params\n    });\n\n    // Extract and validate parameters\n    let hours, limit;\n    if (typeof timeframe === 'object' && timeframe !== null) {\n      // Called with object: fetchCombinedThreatData({ hours: 24, limit: 500 })\n      hours = timeframe.hours || 24;\n      limit = timeframe.limit || 500;\n      // Extract any additional params from the object\n      params = {\n        ...timeframe,\n        ...params\n      };\n    } else {\n      // Called with separate params: fetchCombinedThreatData(24, { limit: 500 })\n      hours = Number(timeframe) || 24;\n      limit = 500;\n    }\n\n    // Clean params object to prevent malformed query strings\n    const cleanParams = {\n      hours: hours,\n      limit: limit\n    };\n\n    // Only add additional params if they're valid\n    if (typeof params === 'object' && params !== null) {\n      Object.keys(params).forEach(key => {\n        if (key !== 'hours' && key !== 'limit' && params[key] !== undefined) {\n          cleanParams[key] = params[key];\n        }\n      });\n    }\n    console.log('🔧 Cleaned params for API calls:', cleanParams);\n\n    // Fetch data from existing endpoints\n    const [scanAlertsData, deceptionActivityData, alertsStatsData] = await Promise.allSettled([fetchScanAlerts(cleanParams), fetchDeceptionActivity(cleanParams), fetchScanAlertsStats(cleanParams)]);\n    console.log('🔧 API responses:', {\n      scanAlertsData: {\n        status: scanAlertsData.status,\n        value: scanAlertsData.status === 'fulfilled' ? scanAlertsData.value : scanAlertsData.reason,\n        count: scanAlertsData.status === 'fulfilled' ? (_scanAlertsData$value = scanAlertsData.value) === null || _scanAlertsData$value === void 0 ? void 0 : _scanAlertsData$value.length : 0\n      },\n      deceptionActivityData: {\n        status: deceptionActivityData.status,\n        value: deceptionActivityData.status === 'fulfilled' ? deceptionActivityData.value : deceptionActivityData.reason,\n        count: deceptionActivityData.status === 'fulfilled' ? (_deceptionActivityDat = deceptionActivityData.value) === null || _deceptionActivityDat === void 0 ? void 0 : _deceptionActivityDat.length : 0\n      },\n      alertsStatsData: {\n        status: alertsStatsData.status,\n        value: alertsStatsData.status === 'fulfilled' ? alertsStatsData.value : alertsStatsData.reason\n      }\n    });\n\n    // Transform scan alerts (scan_alerts collection) to expected format\n    const scanAlerts = scanAlertsData.status === 'fulfilled' ? scanAlertsData.value.map(alert => {\n      const transformed = {\n        ...alert,\n        collection: 'scan_alerts',\n        // Always set collection explicitly\n        // The backend already returns the correct structure, just ensure collection is set\n        note_type: alert.note_type || alert.alertType,\n        source_ip: alert.source_ip || alert.attackerIP,\n        dest_port: alert.dest_port,\n        uid: alert.uid,\n        message: alert.message || alert.description,\n        threatLevel: alert.threatLevel || alert.severity,\n        severity: alert.severity || alert.threatLevel || 'medium',\n        timestamp: alert.timestamp,\n        attack_category: alert.attack_category || 'network_scan'\n      };\n      console.log('🔧 Transformed scan alert:', {\n        original: alert,\n        transformed\n      });\n      return transformed;\n    }) : [];\n    console.log('🔧 Final scan alerts count:', scanAlerts.length);\n    if (scanAlerts.length > 0) {\n      console.log('🔧 First scan alert sample:', scanAlerts[0]);\n    }\n\n    // Transform deception activity (deception_detection collection) to expected format\n    const deceptionActivity = deceptionActivityData.status === 'fulfilled' ? deceptionActivityData.value.map(alert => {\n      const transformed = {\n        ...alert,\n        collection: 'deception_detection',\n        // Always set collection explicitly\n        // The backend already returns the correct structure, just ensure collection is set\n        note_type: alert.note_type || alert.alertType,\n        source_ip: alert.source_ip || alert.attackerIP,\n        dest_port: alert.dest_port,\n        uid: alert.uid || alert.id,\n        message: alert.message || alert.description,\n        threatLevel: alert.threatLevel || alert.severity || 'medium',\n        severity: alert.severity || alert.threatLevel || 'medium',\n        timestamp: alert.timestamp,\n        attack_category: alert.attack_category || 'honeypot_engagement'\n      };\n      console.log('🔧 Transformed deception activity:', {\n        original: alert,\n        transformed\n      });\n      return transformed;\n    }) : [];\n    console.log('🔧 Final deception activity count:', deceptionActivity.length);\n    if (deceptionActivity.length > 0) {\n      console.log('🔧 First deception activity sample:', deceptionActivity[0]);\n    }\n\n    // Transform alerts stats to expected format\n    const alertsStats = alertsStatsData.status === 'fulfilled' ? {\n      total_alerts: alertsStatsData.value.total || 0,\n      threat_levels: alertsStatsData.value,\n      protocol_distribution: [],\n      attack_trends: []\n    } : {\n      total_alerts: 0,\n      threat_levels: {\n        total: 0,\n        high: 0,\n        medium: 0,\n        low: 0,\n        critical: 0\n      },\n      protocol_distribution: [],\n      attack_trends: []\n    };\n    console.log('🔧 Combined threat data fetched successfully:', {\n      scanAlerts: scanAlerts.length,\n      deceptionActivity: deceptionActivity.length,\n      alertsStats: alertsStats\n    });\n    return {\n      scanAlerts,\n      deceptionActivity,\n      alertsStats,\n      lastUpdated: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('❌ Error fetching combined threat data:', error);\n    // Return empty data structure on error\n    return {\n      scanAlerts: [],\n      deceptionActivity: [],\n      alertsStats: {\n        total_alerts: 0,\n        threat_levels: {\n          total: 0,\n          high: 0,\n          medium: 0,\n          low: 0,\n          critical: 0\n        },\n        protocol_distribution: [],\n        attack_trends: []\n      },\n      lastUpdated: new Date().toISOString()\n    };\n  }\n};\nexport const fetchAttackPatterns = async (hours = 24) => {\n  const response = await apiClient.get(`/network-security/attack-patterns?hours=${hours}`);\n  return response.data;\n};\nexport const fetchThreatFeed = async (limit = 50) => {\n  const response = await apiClient.get(`/network-security/threat-feed?limit=${limit}`);\n  return response.data;\n};\n\n// --- Attack Detail API ---\nexport const fetchAttackDetail = async (ip, hours = 24) => {\n  const response = await apiClient.get(`/network-security/attack-detail/${ip}?hours=${hours}`);\n  return response.data;\n};\n\n// --- Legacy API Functions (Deprecated - Coming Soon Features) ---\n// These functions are kept for backward compatibility but will be removed\n// when the respective features are implemented\n\nexport const fetchOTHoneypots = async (params = {}) => {\n  console.warn('fetchOTHoneypots is deprecated - OT Honeypots feature coming soon');\n  // Return mock data for now\n  return [];\n};\nexport const fetchOTDashboardStats = async (timeframe = '24h', params = {}) => {\n  console.warn('fetchOTDashboardStats is deprecated - OT Dashboard feature coming soon');\n  // Return mock data for now\n  return {\n    total_attacks: 0,\n    threat_levels: [],\n    protocol_distribution: [],\n    attack_trends: []\n  };\n};\nexport const fetchOTThreats = async (timeframe = '24h', limit = 20, params = {}) => {\n  console.warn('fetchOTThreats is deprecated - OT Threats feature coming soon');\n  // Return mock data for now\n  return [];\n};\nexport const fetchOTSafetyIncidents = async (timeframe = '24h', limit = 10, params = {}) => {\n  console.warn('fetchOTSafetyIncidents is deprecated - OT Safety feature coming soon');\n  // Return mock data for now\n  return [];\n};\nexport const fetchOTAttackTimeline = async (timeframe = '24h', params = {}) => {\n  console.warn('fetchOTAttackTimeline is deprecated - OT Timeline feature coming soon');\n  // Return mock data for now\n  return [];\n};\nexport const fetchSessionById = async (sessionId, params = {}) => {\n  console.warn('fetchSessionById is deprecated - Session Analysis feature coming soon');\n  // Return mock data for now\n  return {\n    session_id: sessionId,\n    source_ip: '0.0.0.0',\n    start_time: new Date().toISOString(),\n    end_time: new Date().toISOString(),\n    duration: 0,\n    exit_code: 0,\n    active: false\n  };\n};\nexport const fetchRawLogs = async (params = {}) => {\n  console.warn('fetchRawLogs is deprecated - Raw Logs feature coming soon');\n  // Return mock data for now\n  return [];\n};\nexport const analyzeSession = async (sessionId, params = {}) => {\n  console.warn('analyzeSession is deprecated - Session Analysis feature coming soon');\n  // Return mock data for now\n  return {\n    session_id: sessionId,\n    analysis: 'Session analysis feature coming soon',\n    timestamp: new Date().toISOString()\n  };\n};\nexport const fetchDashboardSummary = async (timeframe = 24, params = {}) => {\n  console.warn('fetchDashboardSummary is deprecated - use fetchCombinedThreatData instead');\n  // Redirect to the new function\n  return await fetchCombinedThreatData(timeframe, params);\n};\nexport const fetchEnhancedDashboardData = async (params = {}) => {\n  console.warn('fetchEnhancedDashboardData is deprecated - use fetchCombinedThreatData instead');\n  // Redirect to the new function\n  return await fetchCombinedThreatData(24, params);\n};","map":{"version":3,"names":["axios","getApiBaseUrl","process","env","NODE_ENV","console","log","hasWindow","window","hasLocation","location","envApiUrl","REACT_APP_API_URL","envWsUrl","REACT_APP_WS_URL","protocol","hostname","targetHost","dynamicUrl","currentLocation","href","constructedUrl","architecture","fallbackUrl","API_BASE_URL","updateApiBaseUrl","apiClient","defaults","baseURL","getCurrentApiBaseUrl","refreshApiConfiguration","create","timeout","headers","interceptors","response","use","error","_error$response","originalRequest","config","_retry","code","status","Promise","resolve","setTimeout","request","reject","token","localStorage","getItem","common","setAuthToken","setItem","removeItem","checkHealth","get","data","checkQuickHealth","login","username","password","post","fetchHoneypots","startHoneypot","id","stopHoneypot","fetchHoneypotStatuses","fetchHoneypotPlugins","updateHoneypotPlugins","put","rebuildHoneypot","fetchEvents","params","warn","fetchCombinedThreatData","scanAlerts","fetchEventsStats","fetchScanAlertsStats","fetchEventsTimeline","fetchEventById","eventId","fetchHoneypotEvents","fetchHoneypotEventsStats","fetchScanAlerts","length","fetchDeceptionActivity","fetchZeekAlerts","fetchZeekAlertsStats","timeframe","_scanAlertsData$value","_deceptionActivityDat","hours","limit","Number","cleanParams","Object","keys","forEach","key","undefined","scanAlertsData","deceptionActivityData","alertsStatsData","allSettled","value","reason","count","map","alert","transformed","collection","note_type","alertType","source_ip","attackerIP","dest_port","uid","message","description","threatLevel","severity","timestamp","attack_category","original","deceptionActivity","alertsStats","total_alerts","total","threat_levels","protocol_distribution","attack_trends","high","medium","low","critical","lastUpdated","Date","toISOString","fetchAttackPatterns","fetchThreatFeed","fetchAttackDetail","ip","fetchOTHoneypots","fetchOTDashboardStats","total_attacks","fetchOTThreats","fetchOTSafetyIncidents","fetchOTAttackTimeline","fetchSessionById","sessionId","session_id","start_time","end_time","duration","exit_code","active","fetchRawLogs","analyzeSession","analysis","fetchDashboardSummary","fetchEnhancedDashboardData"],"sources":["/home/demon/distributed-architecture/central-infrastructure/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Smart API base URL detection for distributed architecture\nconst getApiBaseUrl = () => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log('🔧 getApiBaseUrl called with:', {\n      hasWindow: typeof window !== 'undefined',\n      hasLocation: typeof window !== 'undefined' && window.location,\n      envApiUrl: process.env.REACT_APP_API_URL,\n      envWsUrl: process.env.REACT_APP_WS_URL\n    });\n  }\n\n  // If we're in a browser environment, dynamically determine from current page location\n  if (typeof window !== 'undefined' && window.location) {\n    // Use environment variable if set, otherwise dynamically determine from current location\n    if (process.env.REACT_APP_API_URL && process.env.REACT_APP_API_URL !== 'undefined') {\n      console.log('🔧 Using environment variable for API URL:', process.env.REACT_APP_API_URL);\n      return process.env.REACT_APP_API_URL;\n    }\n    \n    console.log('🔧 No environment variable set, using dynamic detection');\n    \n    // Get current host and construct backend URL\n    const { protocol, hostname } = window.location;\n    \n    // Special handling for distributed architecture\n    // If accessing from client VM (10.0.44.3), use VPS backend IP (10.0.44.77)\n    // If accessing from central infrastructure (10.0.44.32), use local backend\n    let targetHost = hostname;\n    if (hostname === '10.0.44.3') {\n      targetHost = '10.0.44.77';\n      console.log('🔧 Client VM detected, routing to VPS backend:', targetHost);\n    } else if (hostname === '10.0.44.32') {\n      targetHost = 'localhost';\n      console.log('🔧 Central infrastructure detected, routing to local backend:', targetHost);\n    }\n    \n    const dynamicUrl = `${protocol}//${targetHost}:5000/api`;\n    console.log('🔧 Dynamic API URL detected:', {\n      currentLocation: window.location.href,\n      protocol,\n      hostname,\n      targetHost,\n      constructedUrl: dynamicUrl,\n      architecture: 'distributed'\n    });\n    return dynamicUrl;\n  }\n  \n  // Fallback for SSR or when window.location is not available\n  const fallbackUrl = process.env.REACT_APP_API_URL || 'http://backend:5000/api';\n  console.log('🔧 Using fallback API URL:', fallbackUrl);\n  return fallbackUrl;\n};\n\n// Initialize API_BASE_URL\nlet API_BASE_URL = getApiBaseUrl();\n\n// Function to update API_BASE_URL dynamically (useful for debugging)\nexport const updateApiBaseUrl = () => {\n  API_BASE_URL = getApiBaseUrl();\n  console.log('🔧 Updated API_BASE_URL to:', API_BASE_URL);\n  \n  // Update axios baseURL\n  apiClient.defaults.baseURL = API_BASE_URL;\n  return API_BASE_URL;\n};\n\n// Function to get current API base URL\nexport const getCurrentApiBaseUrl = () => {\n  return API_BASE_URL;\n};\n\n// Function to force refresh API configuration (useful when page loads)\nexport const refreshApiConfiguration = () => {\n  console.log('🔧 Refreshing API configuration...');\n  return updateApiBaseUrl();\n};\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 15000, // Increased timeout for health checks that include HoneypotManager\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\n// Log the initial configuration\nconsole.log('🔧 Axios client created with baseURL:', API_BASE_URL);\n\n// Add retry logic for container network issues\napiClient.interceptors.response.use(\n  response => response,\n  async error => {\n    const originalRequest = error.config;\n    \n    // Retry for network errors or 5xx server errors\n    if (\n      !originalRequest._retry &&\n      (error.code === 'ECONNABORTED' || \n       error.response?.status >= 500 || \n       error.code === 'NETWORK_ERROR')\n    ) {\n      originalRequest._retry = true;\n      console.log('Retrying request due to network error...');\n      \n      // Wait 1 second before retry\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return apiClient.request(originalRequest);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Set auth token from localStorage\nconst token = localStorage.getItem('authToken');\nif (token) {\n  apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n}\n\nexport const setAuthToken = (token) => {\n  if (token) {\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    localStorage.setItem('authToken', token);\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n    localStorage.removeItem('authToken');\n  }\n};\n\n// --- Health Check ---\nexport const checkHealth = async () => {\n  const response = await apiClient.get('/health');\n  return response.data;\n};\n\nexport const checkQuickHealth = async () => {\n  const response = await apiClient.get('/health/quick');\n  return response.data;\n};\n\n// --- Auth ---\nexport const login = async (username, password) => {\n  const response = await apiClient.post('/auth/login', { username, password });\n  return response.data;\n};\n\n// --- Honeypots ---\nexport const fetchHoneypots = async () => {\n  const response = await apiClient.get('/honeypots');\n  return response.data;\n};\n\nexport const startHoneypot = async (id) => {\n  const response = await apiClient.post(`/honeypots/control/${id}/start`);\n  return response.data;\n};\n\nexport const stopHoneypot = async (id) => {\n  const response = await apiClient.post(`/honeypots/control/${id}/stop`);\n  return response.data;\n};\n\nexport const fetchHoneypotStatuses = async () => {\n  const response = await apiClient.get('/honeypots/control/status');\n  return response.data;\n};\n\n// --- Plugin Management ---\nexport const fetchHoneypotPlugins = async (id) => {\n  const response = await apiClient.get(`/honeypots/${id}/plugins`);\n  return response.data;\n};\n\nexport const updateHoneypotPlugins = async (id, config) => {\n  const response = await apiClient.put(`/honeypots/${id}/plugins`, config);\n  return response.data;\n};\n\nexport const rebuildHoneypot = async (id) => {\n  const response = await apiClient.post(`/honeypots/${id}/rebuild`);\n  return response.data;\n};\n\n// --- Events (Primary Collection as per Connection.md) ---\nexport const fetchEvents = async (params = {}) => {\n  console.warn('fetchEvents is deprecated - use fetchCombinedThreatData instead');\n  // Redirect to the new function\n  const data = await fetchCombinedThreatData(24, params);\n  return data.scanAlerts || [];\n};\n\nexport const fetchEventsStats = async (params = {}) => {\n  console.warn('fetchEventsStats is deprecated - use fetchScanAlertsStats instead');\n  // Redirect to the new function\n  return await fetchScanAlertsStats(params);\n};\n\nexport const fetchEventsTimeline = async (params = {}) => {\n  console.warn('fetchEventsTimeline is deprecated - use fetchScanAlerts with time filtering instead');\n  // Return mock data for now\n  return [];\n};\n\nexport const fetchEventById = async (eventId) => {\n  const response = await apiClient.get(`/events/${eventId}`);\n  return response.data;\n};\n\n// Legacy honeypot events (secondary collection)\nexport const fetchHoneypotEvents = async (params = {}) => {\n  const response = await apiClient.get('/honeypot-events', { params });\n  return response.data;\n};\n\nexport const fetchHoneypotEventsStats = async (params = {}) => {\n  const response = await apiClient.get('/honeypot-events/stats', { params });\n  return response.data;\n};\n\n// --- Scan Alerts (Primary Data Source) ---\nexport const fetchScanAlerts = async (params = {}) => {\n  console.log('🔧 fetchScanAlerts called with params:', params);\n  // Use the new scan-alerts endpoint\n  const response = await apiClient.get('/network-security/scan-alerts', { params });\n  console.log('🔧 fetchScanAlerts response:', response.data.length, 'items');\n  return response.data;\n};\n\n// --- Scan Alerts Statistics ---\nexport const fetchScanAlertsStats = async (params = {}) => {\n  console.log('🔧 fetchScanAlertsStats called with params:', params);\n  // Use the new scan-alerts/stats endpoint\n  const response = await apiClient.get('/network-security/scan-alerts/stats', { params });\n  console.log('🔧 fetchScanAlertsStats response:', response.data);\n  return response.data;\n};\n\n// --- Deception Activity (Primary Data Source) ---\nexport const fetchDeceptionActivity = async (params = {}) => {\n  console.log('🔧 fetchDeceptionActivity called with params:', params);\n  // Use the new deception-activity endpoint\n  const response = await apiClient.get('/network-security/deception-activity', { params });\n  console.log('🔧 fetchDeceptionActivity response:', response.data.length, 'items');\n  return response.data;\n};\n\n// --- Legacy Functions (Maintained for backward compatibility) ---\nexport const fetchZeekAlerts = async (params = {}) => {\n  // Redirect to new scan alerts endpoint\n  return fetchScanAlerts(params);\n};\n\nexport const fetchZeekAlertsStats = async (params = {}) => {\n  // Redirect to new alerts stats endpoint\n  return fetchScanAlertsStats(params);\n};\n\n// --- Combined Threat Data (Primary Function) ---\nexport const fetchCombinedThreatData = async (timeframe = 24, params = {}) => {\n  try {\n    console.log('🔧 fetchCombinedThreatData called with:', { timeframe, params });\n    \n    // Extract and validate parameters\n    let hours, limit;\n    \n    if (typeof timeframe === 'object' && timeframe !== null) {\n      // Called with object: fetchCombinedThreatData({ hours: 24, limit: 500 })\n      hours = timeframe.hours || 24;\n      limit = timeframe.limit || 500;\n      // Extract any additional params from the object\n      params = { ...timeframe, ...params };\n    } else {\n      // Called with separate params: fetchCombinedThreatData(24, { limit: 500 })\n      hours = Number(timeframe) || 24;\n      limit = 500;\n    }\n    \n    // Clean params object to prevent malformed query strings\n    const cleanParams = {\n      hours: hours,\n      limit: limit\n    };\n    \n    // Only add additional params if they're valid\n    if (typeof params === 'object' && params !== null) {\n      Object.keys(params).forEach(key => {\n        if (key !== 'hours' && key !== 'limit' && params[key] !== undefined) {\n          cleanParams[key] = params[key];\n        }\n      });\n    }\n    \n    console.log('🔧 Cleaned params for API calls:', cleanParams);\n    \n    // Fetch data from existing endpoints\n    const [scanAlertsData, deceptionActivityData, alertsStatsData] = await Promise.allSettled([\n      fetchScanAlerts(cleanParams),\n      fetchDeceptionActivity(cleanParams),\n      fetchScanAlertsStats(cleanParams)\n    ]);\n\n    console.log('🔧 API responses:', {\n      scanAlertsData: {\n        status: scanAlertsData.status,\n        value: scanAlertsData.status === 'fulfilled' ? scanAlertsData.value : scanAlertsData.reason,\n        count: scanAlertsData.status === 'fulfilled' ? scanAlertsData.value?.length : 0\n      },\n      deceptionActivityData: {\n        status: deceptionActivityData.status,\n        value: deceptionActivityData.status === 'fulfilled' ? deceptionActivityData.value : deceptionActivityData.reason,\n        count: deceptionActivityData.status === 'fulfilled' ? deceptionActivityData.value?.length : 0\n      },\n      alertsStatsData: {\n        status: alertsStatsData.status,\n        value: alertsStatsData.status === 'fulfilled' ? alertsStatsData.value : alertsStatsData.reason\n      }\n    });\n\n    // Transform scan alerts (scan_alerts collection) to expected format\n    const scanAlerts = scanAlertsData.status === 'fulfilled' ? \n      scanAlertsData.value.map(alert => {\n        const transformed = {\n          ...alert,\n          collection: 'scan_alerts', // Always set collection explicitly\n          // The backend already returns the correct structure, just ensure collection is set\n          note_type: alert.note_type || alert.alertType,\n          source_ip: alert.source_ip || alert.attackerIP,\n          dest_port: alert.dest_port,\n          uid: alert.uid,\n          message: alert.message || alert.description,\n          threatLevel: alert.threatLevel || alert.severity,\n          severity: alert.severity || alert.threatLevel || 'medium',\n          timestamp: alert.timestamp,\n          attack_category: alert.attack_category || 'network_scan'\n        };\n        console.log('🔧 Transformed scan alert:', { original: alert, transformed });\n        return transformed;\n      }) : [];\n\n    console.log('🔧 Final scan alerts count:', scanAlerts.length);\n    if (scanAlerts.length > 0) {\n      console.log('🔧 First scan alert sample:', scanAlerts[0]);\n    }\n\n    // Transform deception activity (deception_detection collection) to expected format\n    const deceptionActivity = deceptionActivityData.status === 'fulfilled' ? \n      deceptionActivityData.value.map(alert => {\n        const transformed = {\n          ...alert,\n          collection: 'deception_detection', // Always set collection explicitly\n          // The backend already returns the correct structure, just ensure collection is set\n          note_type: alert.note_type || alert.alertType,\n          source_ip: alert.source_ip || alert.attackerIP,\n          dest_port: alert.dest_port,\n          uid: alert.uid || alert.id,\n          message: alert.message || alert.description,\n          threatLevel: alert.threatLevel || alert.severity || 'medium',\n          severity: alert.severity || alert.threatLevel || 'medium',\n          timestamp: alert.timestamp,\n          attack_category: alert.attack_category || 'honeypot_engagement'\n        };\n        console.log('🔧 Transformed deception activity:', { original: alert, transformed });\n        return transformed;\n      }) : [];\n\n    console.log('🔧 Final deception activity count:', deceptionActivity.length);\n    if (deceptionActivity.length > 0) {\n      console.log('🔧 First deception activity sample:', deceptionActivity[0]);\n    }\n\n    // Transform alerts stats to expected format\n    const alertsStats = alertsStatsData.status === 'fulfilled' ? {\n      total_alerts: alertsStatsData.value.total || 0,\n      threat_levels: alertsStatsData.value,\n      protocol_distribution: [],\n      attack_trends: []\n    } : {\n      total_alerts: 0,\n      threat_levels: { total: 0, high: 0, medium: 0, low: 0, critical: 0 },\n      protocol_distribution: [],\n      attack_trends: []\n    };\n\n    console.log('🔧 Combined threat data fetched successfully:', {\n      scanAlerts: scanAlerts.length,\n      deceptionActivity: deceptionActivity.length,\n      alertsStats: alertsStats\n    });\n\n    return {\n      scanAlerts,\n      deceptionActivity,\n      alertsStats,\n      lastUpdated: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('❌ Error fetching combined threat data:', error);\n    // Return empty data structure on error\n    return {\n      scanAlerts: [],\n      deceptionActivity: [],\n      alertsStats: {\n        total_alerts: 0,\n        threat_levels: { total: 0, high: 0, medium: 0, low: 0, critical: 0 },\n        protocol_distribution: [],\n        attack_trends: []\n      },\n      lastUpdated: new Date().toISOString()\n    };\n  }\n};\n\nexport const fetchAttackPatterns = async (hours = 24) => {\n  const response = await apiClient.get(`/network-security/attack-patterns?hours=${hours}`);\n  return response.data;\n};\n\nexport const fetchThreatFeed = async (limit = 50) => {\n  const response = await apiClient.get(`/network-security/threat-feed?limit=${limit}`);\n  return response.data;\n};\n\n// --- Attack Detail API ---\nexport const fetchAttackDetail = async (ip, hours = 24) => {\n  const response = await apiClient.get(`/network-security/attack-detail/${ip}?hours=${hours}`);\n  return response.data;\n};\n\n// --- Legacy API Functions (Deprecated - Coming Soon Features) ---\n// These functions are kept for backward compatibility but will be removed\n// when the respective features are implemented\n\nexport const fetchOTHoneypots = async (params = {}) => {\n  console.warn('fetchOTHoneypots is deprecated - OT Honeypots feature coming soon');\n  // Return mock data for now\n  return [];\n};\n\nexport const fetchOTDashboardStats = async (timeframe = '24h', params = {}) => {\n  console.warn('fetchOTDashboardStats is deprecated - OT Dashboard feature coming soon');\n  // Return mock data for now\n  return {\n    total_attacks: 0,\n    threat_levels: [],\n    protocol_distribution: [],\n    attack_trends: []\n  };\n};\n\nexport const fetchOTThreats = async (timeframe = '24h', limit = 20, params = {}) => {\n  console.warn('fetchOTThreats is deprecated - OT Threats feature coming soon');\n  // Return mock data for now\n  return [];\n};\n\nexport const fetchOTSafetyIncidents = async (timeframe = '24h', limit = 10, params = {}) => {\n  console.warn('fetchOTSafetyIncidents is deprecated - OT Safety feature coming soon');\n  // Return mock data for now\n  return [];\n};\n\nexport const fetchOTAttackTimeline = async (timeframe = '24h', params = {}) => {\n  console.warn('fetchOTAttackTimeline is deprecated - OT Timeline feature coming soon');\n  // Return mock data for now\n  return [];\n};\n\nexport const fetchSessionById = async (sessionId, params = {}) => {\n  console.warn('fetchSessionById is deprecated - Session Analysis feature coming soon');\n  // Return mock data for now\n  return {\n    session_id: sessionId,\n    source_ip: '0.0.0.0',\n    start_time: new Date().toISOString(),\n    end_time: new Date().toISOString(),\n    duration: 0,\n    exit_code: 0,\n    active: false\n  };\n};\n\nexport const fetchRawLogs = async (params = {}) => {\n  console.warn('fetchRawLogs is deprecated - Raw Logs feature coming soon');\n  // Return mock data for now\n  return [];\n};\n\nexport const analyzeSession = async (sessionId, params = {}) => {\n  console.warn('analyzeSession is deprecated - Session Analysis feature coming soon');\n  // Return mock data for now\n  return {\n    session_id: sessionId,\n    analysis: 'Session analysis feature coming soon',\n    timestamp: new Date().toISOString()\n  };\n};\n\nexport const fetchDashboardSummary = async (timeframe = 24, params = {}) => {\n  console.warn('fetchDashboardSummary is deprecated - use fetchCombinedThreatData instead');\n  // Redirect to the new function\n  return await fetchCombinedThreatData(timeframe, params);\n};\n\nexport const fetchEnhancedDashboardData = async (params = {}) => {\n  console.warn('fetchEnhancedDashboardData is deprecated - use fetchCombinedThreatData instead');\n  // Redirect to the new function\n  return await fetchCombinedThreatData(24, params);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}